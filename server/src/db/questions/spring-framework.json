[
    {
        "query": " Q1. How filters are used in Spring Web?",
        "options": [
            " Filters are called before a request hits the DispatcherServlet. They allow for interception-style, chained processing of web requests for security, timeouts, and other purposes.\r\n",
            " Filters are used with a checksum algorithm that will filter invalid bytes out of a byte stream request body and allow for processing of HTTP requests from the DispatcherRequestServlet.\r\n",
            " Filters are used with a checksum algorithm that will filter invalid bytes out of an octet stream a multipart upload and allow for chained processing of WebDispatcherServlet requests.\r\n",
            " Filters are used to validate request parameters out of the byte stream request body and allow for processing of requests from the DispatcherRequestServlet.\r\n\r\nReference: [HandlerInterceptors vs. Filters in Spring MVC](https://www.baeldung.com/spring-mvc-handlerinterceptor-vs-filter). Also there is no such thing as DispatcherRequestServlet in Spring.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q2. How is a resource defined in the context of a REST service?",
        "options": [
            " A resource is the actual String literal that composes a URI that is accessed on a RESTful web service.\r\n",
            " It is an abstract concept that represents a typed object, data, relationships, and a set of methods that operate on it that is accessed via a URI.\r\n",
            " A REST service has a pool of resources composed of allocations of memory that allow a request to be processed.\r\n",
            " A resource for a REST service is an explicit allocation of a thread or CPU cycles to allow a request to be processed.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q3. Which of these is a valid Advice annotation?",
        "options": [
            " @AfterError\r\n",
            " @AfterReturning\r\n",
            " @AfterException\r\n",
            " @AfterExecution\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q4. What does a ViewResolver do?",
        "options": [
            " It supports internationalization of web applications by detecting a user's locale.\r\n",
            " It generates a view by mapping a logical view name returned by a controller method to a view technology.\r\n",
            " It creates a unique view determined by the uers's browser type,supporting cross-browser compatibility.\r\n",
            " It maps custom parameters to SQL views in the database, allowing for dynamic content to be created in the response.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q5. How are Spring Data repositories implemented by Spring at runtime?",
        "options": [
            " Spring automatically generated code for you based on your YAML config that defined a MethodInterceptor chain that intercept calls to the instance and computed SQL on the fly.\r\n",
            " A JDK proxy instance is created, which backs the repository interface, and a MethodInterceptor intercepts calls to the instance and routes as required.\r\n",
            " The Spring JDK proxy creates a separate runtime process that acts as an intermediary between the database and the Web server, and intercepts calls to the instance and handles requests.\r\n",
            " Spring automatically generated code for you based on your XML config files that define a SpringMethodAutoGeneration factory that intercepts calls to the instance and creates dynamic method that computer SQL on the fly.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q6. What is SpEL and how is it used in Spring?",
        "options": [
            " SpEL(Spring Expression Language) runs in the JVM and can act as a drop-in replacement for Groovy or other languages.\r\n",
            " SpEL(Spring Expression Language) supports boolean and relational operators and regular expressions, and is used for querying a graph of objects at runtime.\r\n",
            " SpEL(Spring Expression Language) allows you to build, configure,and execute tasks such as building artifacts and downloading object dependencies.\r\n",
            " SpEL(Spring Expression Language) natively transpiles one JVM language to another, allowing for greater flexibility.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q7. The process of linking aspects with other objects to create an advised object is called",
        "options": [
            " dynamic chaining\r\n",
            " banding\r\n",
            " weaving\r\n",
            " interleaving\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q8. How are JDK Dynamic proxies and CGLIB proxies used in Spring?",
        "options": [
            " JDK Dynamic proxy can proxy only interface, so it is used if the target implements at least one interface. A CGLIB proxy can create a proxy by subclassing and is used if the target does not implement an interface.\r\n",
            " Only JDK Dynamic proxies are used in the Spring Bean Lifecycle. CGLIB proxies are used only for integrating with other frameworks.\r\n",
            " Only CGLIB proxies are used in the Spring Bean Lifecycle. JDK Dynamic proxies are used only for integrating with other frameworks.\r\n",
            " JDK Dynamic proxy can only using an abstract class extended by a target. A CGLIB proxy can create a proxy through bytecode interweaving and is used if the target does not extend an abstract class.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q9. Which of these is not a valid method on the JoinPoint interface?",
        "options": [
            " getArgs()\r\n",
            " getExceptions()\r\n",
            " getSignature()\r\n",
            " getTarget()\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q10. In what order do the @PostConstruct annotated method, the init-method parameter method on beans and the afterPropertiesSet() method execute?",
        "options": [
            " 1. afterPropertiesSet() 2. init-method 3. @PostConstruct\r\n",
            " 1. @PostConstruct 2. afterPropertiesSet() 3. init-method\r\n",
            " 1. init-method 2. afterPropertiesSet() 3. @PostConstruct\r\n",
            " You cannot use these methods together-you must choose only one.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q11. What is the function of the `@Transactional` annotation at the class level?",
        "options": [
            " It's a transaction attribute configured by `spring.security.transactions.xml` config file that uses Spring's transaction implementation and validation code.\r\n",
            " It's a transaction that must actively validate by the bytecode of a transaction using Spring's `TransactionBytecodeValidator` class. Default Transaction behavior rolls back on validation exception but commits on proper validation\r\n",
            " It creates a proxy that implements the same interface(s) as the annotated class, allowing Spring to inject behaviors before, after, or around method calls into the object being proxied.\r\n",
            " It's a transaction that must be actively validated by Spring's `TransactionValidator` class using Spring's transaction validation code. Default Transaction behavior rolls back on validation exception.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q12. Which is a valid example of the output from this code (ignoring logging statements) ?",
        "code": "java\r\n@SpringBootApplication\r\npublic class App {\r\n     public static void main(String args[]) {\r\n          SpringApplication.run(App.class, args);\r\n          System.out.println(\"startup\");\r\n     }\r\n}\r\n\r\npublic class Print implements InitializingBean {\r\n     @Override\r\n     public void afterPropertiesSet() throws Exception {\r\n          System.out.println(\"init\");\r\n     }\r\n}\r\n",
        "options": [
            " Nothing will print\r\n",
            " startup\r\n      init\r\n",
            " init\r\n",
            " startup\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q13. Which println statement would you remove to stop this code throwing a null pointer exception?",
        "code": "java\r\n@Component\r\npublic class Test implements InitializingBean {\r\n     @Autowired\r\n     ApplicationContext context;\r\n     @Autowired\r\n     static SimpleDateFormt formatter;\r\n\r\n     @Override\r\n     public void afterPropertiesSet() throws Exception {\r\n          System.out.println(context.containsBean(\"formatter\") + \" \");\r\n          System.out.println(context.getBean(\"formatter\").getClass());\r\n          System.out.println(formatter.getClass());\r\n          System.out.println(context.getClass());\r\n     }\r\n}\r\n\r\n@Configuration\r\nclass TestConfig {\r\n     @Bean\r\n     public SimpleDateFormat formatter() {\r\n          return new SimpleDateFormat();\r\n     }\r\n}\r\n",
        "options": [
            " formatter.getClass()\r\n",
            " context.getClass()\r\n",
            " context.getBean(\"formatter\").getClass()\r\n",
            " context.containsBean(\"formatter\")\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q14. What is the root interface for accessing a Spring bean container?",
        "options": [
            " SpringInitContainer\r\n",
            " ResourceLoader\r\n",
            " ApplicationEventPublisher\r\n",
            " BeanFactory\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q15. Which annotation can be used within Spring Security to apply method level security?",
        "options": [
            " @Secured\r\n",
            " @RequiresRole\r\n",
            " @RestrictedTo\r\n",
            " @SecurePath\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q16. What is the result of calling the map controller method using the HTTP request GET localhost:8080/map?foo=foo&bar=bar ?",
        "code": "java\r\n@RestController\r\npublic class SampleController {\r\n\r\n     @RequestMapping(\"/map\")\r\n     public String map(@RequestParam(\"bar\") String foo, @RequestParam(\"foo\") String bar) {\r\n          return bar + foo;\r\n     }\r\n}\r\n",
        "options": [
            " An InvalidParameterNameMappingException is thrown at runtime.\r\n",
            " barfoo\r\n",
            " foobar\r\n",
            " A status code of 400 Bad Request is returned.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q17. What is the purpose of the @Lazy annotation and why would you use it?",
        "options": [
            " It prevents a bean from being created and injected until you run a specific CLI command. It reduces complexity in the application.\r\n",
            " It can be applied to a bean so that the bean is not persisted in the database. It reduces the number of database operations.\r\n",
            " It can be applied to a bean so that the bean is not created and injected until it is needed. It can help speed up startup time for your application.\r\n",
            " It prevents a bean from being created and injected until it receives a HTTP request to a callback hook. It reduces disk footprint.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q18. What is dependency injection?",
        "options": [
            " a method by which objects define dependencies they need as abstractions that allows the framework to instantiate and configure them in a central location at runtime.\r\n",
            " a paradigm where dependent code is injected into the bytecode of a Java application on a remote server.\r\n",
            " a way of injecting remote dependencies into a pre-packaged JAR file from the file system.\r\n",
            " a way of injecting remote dependencies into a pre-packaged WAR file from the file system.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q19. What is a RESTful web service?",
        "options": [
            " Reactive Enterprise Status Transfer is a web service comprising a set of guidelines and technical constraints for web services that monitor and alert of a set of mission-critical resources.\r\n",
            " Representational State Transfer an architectural style for creating web services that includes client-server architecture, statelessness, cacheability, a layered system, and a uniform interface.\r\n",
            " Redundant Enumerated State Transfer is a web service that provides redundancy in the case of failure and outlines technical constraints for web services that have access to resources.\r\n",
            " Reactive Enterprise State Transfer is a web service comprising a set of guidelines and technical constraints for web services y that have access to resources and are async in nature.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q20. What happens when a class is annotated with the @Controller annotation?",
        "options": [
            " A controller bean definition is defined in the servlet's WebApplicationContext. The class is marked as a web component, and you can map requests to controller methods.\r\n",
            " A controller bean definition is defined in the Web Context, and Web Servlet is marked as a component that reads mapped controller requests from an XML config file.\r\n",
            " A controller bean definition is defined in the Tomcat Context, and the Controller Servlet is marked as a web component that reads mapped controller requests from a YAML config file.\r\n",
            " A controller bean definition is defined in the Servlet Context, and the Controller Servlet is marked as a component that reads mapped controller requests from an XML config file.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q21. Which property can be used to change the port of a Spring application?",
        "options": [
            " Port\r\n",
            " spring.port\r\n",
            " spring.settings.port\r\n",
            " server.port\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q22. What is the purpose of the @ResponseBody annotation?",
        "options": [
            " to validate the char array contained in a response to ensure that it is a valid character encoding\r\n",
            " to generate a local byte stream from the body of a response that allows a request to be scanned for security risks\r\n",
            " to indicate whether a handler method return value should be bound to the web response body in servlet environments\r\n",
            " to ensure a ThreadLocal byte stream that allows a response to be encoded for reading directly into a socket stream\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q23. How are mocking frameworks such as Mockito used with Spring?",
        "options": [
            " Mockito will spin up a mock web service hosted in a Docker container that can respond to HTTP requests to mock out third-party APIs.\r\n",
            " Mockito can use annotations or factory methods to create mock objects that may be injected into tests in place of dependencies. The behavior of mocks can be explicitly configured.\r\n",
            " Mockito will create mock users to repeatedly perform requests against your Spring application to test your app's ability to take load.\r\n",
            " Mockito will spin up a mock web service hosted in a Docker container that can respond to RPC calls to mock out remote resources.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q24. What is the name of the central servlet that dispatches requests to controllers?",
        "options": [
            " DispatchingDelegatorServlet\r\n",
            " DispatcherServlet\r\n",
            " Router\r\n",
            " FrontControllerServlet\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q25. What is the purpose of the Spring IoC (Inversion of Control) container?",
        "options": [
            " It instantiates and configures objects, supplied at runtime, to classes that define them as a dependency.\r\n",
            " It allows the front-end code to manage the ResponseBody objects provided by a back-end REST API.\r\n",
            " It allows a database to define business objects via a shared schema at compile time.\r\n",
            " It facilitates a remote server to configure a local application.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q26. What is component scanning?",
        "options": [
            " feature that scans packages for classes with specific annotations and, when found, creates their bean definitions within the IoC container\r\n",
            " paradigm where bytecode is actively scanned to identify additional optimizations to inject into components in the application context\r\n",
            " a method by which cloud repositories are scanned to identify components for injection into an IoC container\r\n",
            " a method by which binary data in a database is searched to identify components for injection into the IoC container\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q27. What does @SpringBootApplication do?",
        "options": [
            " This annotation takes the String literal passed into the annotation as a parameter and automatically generates all the code for your application as per the passed in template parameter.\r\n",
            " This compound annotation applies the @Bootable, @Springify, and @StandardConfig annotations that launch a CLI tool after launching the Spring Boot WAR file that will guide you through a series of prompts to set up your app.\r\n",
            " This annotation scans the provided spring-boot-config-construction.yaml file in your root directory and automatically generates all the code for your application as defined in the YAML file.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q28. How does Spring Data facilitate queries against a datastore?",
        "options": [
            " Queries are explicitly coded in repository implementations using the Spring Data CriteriaBuilder.\r\n",
            " Query metadata is stored in the underlying datastore and retrieved at runtime per repository.\r\n",
            " Queries are derived from the signatures of methods on a Spring Data repository that contain keywords in their name for constructing the query logic.\r\n",
            " A spring-data-queries.xml file contains queries within entity tags that specify the query logic for each repository.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q29. How does Spring generate bean names for classes annotated with @Component that do not specify a name?",
        "options": [
            " It uses the short name of the class with the first letter in lowercase.\r\n",
            " It uses the short name of the class.\r\n",
            " It uses the short name of the class in uppercase.\r\n",
            " It uses the canonical name of the class in lowercase.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q30. What is the delegating filter proxy?",
        "options": [
            " It's the servlet filter chain proxy that handles all requests to the route defined in spring.security.xml. All calls to the filter proxy are forwarded to the ErrorDispatcherServlet.\r\n",
            " It's the servlet filter chain that handles requests to the route defined in spring.security.factories. All calls to the filter proxy y are forwarded to the ErrorServlet.\r\n",
            " It's the servlet filter proxy delegating to a filter bean specified in web.xml. All calls to the filter proxy will be delegated to that servlet filter bean.\r\n",
            " It's the web servlet daemon filter proxy that delegates to a bean specified in spring.security.factories. All calls to the filter proxy that do not contain a proper route will return an error.\r\n\r\nReference: [Overview and Need for DelegatingFilterProxy in Spring](https://www.baeldung.com/spring-delegating-filter-proxy)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q31. What value does Spring Boot Actuator provide?",
        "options": [
            " It helps monitor and manage a Spring Boot application by providing endpoints such as health checks, auditing, metrics gathering, and HTTP tracing.\r\n",
            " It provides out-of-the-box functionality that integrates with third-party metrics platforms to automatically scale up and down the number of threads in threadpools.\r\n",
            " It's a CLI that allows you to modify the configuration of a running Spring Boot application without the need for restarting or downtime.\r\n",
            " It provides out-of-the-box functionality that integrates wiltr?third-party metrics platforms to automatically scale up and down the number of instances of the Spring Boot application.\r\n\r\nReference: [Spring Boot Actuator](https://www.baeldung.com/spring-boot-actuators)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q32. What is the purpose of the @ContextConfiguration annotation in a JUnit Test?",
        "options": [
            " It introspects the local machine and automatically provisions resources based on certain contextual configuration files.\r\n",
            " It automatically generates comments for annotated classes on autowired dependencies to provide additional context about dependencies.\r\n",
            " It defines metadata at the class-level to determine how to load or configure an ApplicationContext in Spring integration tests.\r\n",
            " It automatically generates JavaDocs for annotated classes to provide additional context about the purpose of the class.\r\n\r\nReference: [@ContextConfiguration Example in Spring Test](https://www.concretepage.com/spring-5/contextconfiguration-example-spring-test)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q33. How are authentication and authorization different?",
        "options": [
            " Authentication is the act of granting access to specific resources and functions based on config settings. Authorization is the act of introspecting a user's credentials to ensure they are not impersonating another user.\r\n",
            " Authentication is the act of verifying certain resources and functions are actually valid. Authorization is the act of verifying a user's credentials have not expired.\r\n",
            " Authentication is the act of verifying that certain resources and functions actually exist in the database. Authorization is the act of verifying a user's credentials to ensure they are valid.\r\n",
            " Authentication is validating that users are who they claim to be. Authorization is granting access to specific resources and functions.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q34. What is the purpose of the @RequestBody annotation?",
        "options": [
            " to create a ThreadLocal byte stream that allows a request to be encoded for reading directly into a database\r\n",
            " to automatically generate a ThreadLocal byte stream from the body of a request that allows a request to scanned for security risks\r\n",
            " to indicate whether an annotated handler method parameter should be bound to the web request body, which is converted by an HttpMessageConverter\r\n",
            " to automatically validate the characters contained in a request to ensure that they are a valid character encoding\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q35. What is the DispatcherServlet and what is its function?",
        "options": [
            " The DispatcherServlet process daemon assigns a separate Web Servlet Container process to each HTTP request that comes into the web server.\r\n",
            " It is a servlet that dispatches HTTP requests to registered handlers/controllers for processing.\r\n",
            " The DispatcherServlet API assigns a separate Web Servlet Node process to each additional HTTP request that comes into the web server.\r\n",
            " It is a servlet that dispatches an array of background daemon processes that allocate memory and CPU cycles to each request.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q36. What is Spring Boot autoconfiguration?",
        "options": [
            " It triggers a local automated review of configuration files such as web.xml and detects possible security issues or automatically resolves circular dependencies.\r\n",
            " It triggers an automated review of configuration by a web-based agent that reviews your existing web.xml file and detects possible security issues.\r\n",
            " It's an opinionated, intelligent method of introspecting an app to configure beans that are likely to be needed. This configuration can be overridden over time with manual configuration.\r\n",
            " It provides plug-in functionality while editing your web.xml and other config files that will autocomplete common dependencies while typing.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q37. Which are valid steps to take to enable JPA in Spring Boot?",
        "options": [
            " Add an @EnableJpaRepositories annotation to your configuration class and create a Spring Data Repository.\r\n",
            " Add an @EnableJpaEntities annotation to your configuration class, create a Spring Data YAML configuration file, and manually update the Spring XML config files to define your repository locations.\r\n",
            " Add an @EnableDbFunctionality annotation to your configuration class, create a Spring Data XML configuration file, and manually update the Spring factories file to define your repositories.\r\n",
            " Add an @InitJpaEntities annotation to your configuration class, create a Spring Data properties configuration file, and manually update the Spring startup parameters to define your repository locations.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q38. What is a transaction in the context of Spring Data?",
        "options": [
            " a version-controlled schema change that is applied to a database\r\n",
            " a sequence of actions representing a single unit of work managed as a single operation that can be either committed or rolled back\r\n",
            " an encoded message and response between various shards of a database\r\n",
            " an exchange or interaction between various worker nodes in a multithreaded environment\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q39. Modularization of a concern that cuts across multiple classes is known as a(n)`____`.",
        "options": [
            " multiclass\r\n",
            " aspect\r\n",
            " crosscut\r\n",
            " sidecut\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q40. How do you inject a dependency into a Spring bean?",
        "options": [
            " any of these answers\r\n",
            " Annotate a Setter method with the @Autowired annotation.\r\n",
            " Specify parameters in the constructor with an optional @Autowired annotation.\r\n",
            " Use field injection.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q41. Consider the properties file application.properties. How would you load the property my.property?",
        "code": "java\r\nmy.property=Test\r\n",
        "options": [
            " A\r\n\r\n```java\r\n@Prop(\"${my.property}\")\r\nprivate String val;\r\n```\r\n\r\n",
            " B\r\n\r\n```java\r\n@GetVal(\"my.property\")\r\nprivate String val;\r\n```\r\n\r\n",
            " C\r\n\r\n```java\r\n@GetProperty(\"${my.property}\")\r\nprivate String val;\r\n```\r\n\r\n",
            " D\r\n\r\n```java\r\n@Value(\"${my.property}\")\r\nprivate String val;\r\n```\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q42. What is a bean in the context of Spring?",
        "options": [
            " a managed dependency defined by configuration metadata that can be injected into downstream classes\r\n",
            " a binary-encoded, agnostic, named entity that is translatable between different data formats\r\n",
            " a payload that is transferable between different services in a Service-Oriented Architecture (SOA)\r\n",
            " a discrete piece of data that is encoded in a binary format for persisting to a file system\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q43. Which property is given precedence by Spring?",
        "options": [
            " application properties located in an application.properties file outside the application.jar\r\n",
            " @PropertySource annotations on configuration classes\r\n",
            " profile-specific application-{profile}.properties files\r\n",
            " application properties located in an application.properties file inside the application.jar\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q44. In the Spring Bean lifecycle pictured, what should the third step of the process be?",
        "options": [
            " Persist bean definitions into a database\r\n",
            " Instance bean objects\r\n",
            " De-normalize bean definition\r\n",
            " Use reflection to inject bean objects into the servlet container\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q45. What Spring Boot property is used to set the logging level for the entire application in the application.properties file?",
        "options": [
            " logging.settings\r\n",
            " log.level\r\n",
            " root.logger.level\r\n",
            " logging.level.root\r\n\r\nReference: [Logging in Spring Boot](https://www.baeldung.com/spring-boot-logging)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q46. What is a Spring bean uniquely identified?",
        "options": [
            " an autogenerated UUID\r\n",
            " a unique String name\r\n",
            " an auto-incremented Integer ID\r\n",
            " an ID derived from its location in memory\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q47. What is the difference between a JAR and a WAR distribution in Spring Boot?",
        "options": [
            " Spring Boot can create a self-executable WAR file that runs without needing a servlet container. A JAR file has to be deployed to an existing web container such as Tomcat with separate files for dependencies.\r\n",
            " Spring Boot can create a JAR file that contains bytecode that interacts directly with the OS without needing a servlet container. A WAR file has to be deployed to an existing web container such as Tomcat with separate files for dependencies.\r\n",
            " The Spring Boot JAR file will be deployed to a Servlet container such as Tomcat on an existing running web server locally. The WAR file will be deployed to a cloud-based servlet container.\r\n",
            " Spring Boot can create a self-executable JAR file that contains all the dependencies and an embedded Servlet container. A WAR file has to be deployed to an existing web container such as Tomcat.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q48. How does the transaction propagation setting impact the behavior of transactions?",
        "options": [
            " It ensures that transactions that are commited to the database are propagated to all the shards of a clustered database system.\r\n",
            " None of these answers is correct.\r\n",
            " It guarantees that transactions that are submitted to the database cluster are propagated to all the nodes of a clustered database cloud.\r\n",
            " It enforces that a logical transaction scope is created for each method that determines rollback-only status, with an outer transaction scope being logically independent from the inner transaction scope.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q49. What is printed when this code is run as a @SpringBootApplication?",
        "code": "java\r\n@Component\r\npublic class Test implements InitializingBean {\r\n     @Autowired\r\n     ApplicationContext context;\r\n\r\n     private TestService service;\r\n     public void setService(TestService service) {\r\n          this.service = service;\r\n     }\r\n\r\n     @Override\r\n     public void afterPropertiesSet() throws Exception {\r\n          System.out.print(context.containsBean(\"testService\") + \" \");\r\n          System.out.println(service.getClass());\r\n     }\r\n}\r\n@Service\r\nclass TestService {}\r\n",
        "options": [
            " a null pointer stacktrace\r\n",
            " true null\r\n",
            " true package.TestService\r\n",
            " false package.TestService\r\n\r\nExplanation: missing `@Autowired` on `private TestService service` or on the setter\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q50. To register a custom filter that applies only to certain URL patterns, you should remove the **\\_** annotation from the filter class and register a @Bean of type `_` in Spring @Configuration.",
        "options": [
            " @RequestMapping; WebRequest\r\n",
            " @Controller; URLFilter\r\n",
            " @WebFilter; ServletContextInitializer\r\n",
            " @Component; FilterRegistrationBean\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q51. What is the correct term for each definition bellow?",
        "code": null,
        "options": [
            "\r\n  ```\r\n  1. Pointcut\r\n  2. Advice\r\n  3. Join point\r\n  ```\r\n",
            "\r\n  ```\r\n  1. Join point\r\n  2. Pointcut\r\n  3. Advice\r\n  ```\r\n",
            "\r\n  ```\r\n  1. Advice\r\n  2. Pointcut\r\n  3. Join point\r\n  ```\r\n",
            "\r\n  ```\r\n  1. Pointcut\r\n  2. Join point\r\n  3. Advice\r\n  ```\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q52. How should passwords be stored?",
        "options": [
            " Passwords should be hashed using an adaptive one-way function such as bcrypt.\r\n",
            " Passwords can be stored in a BASE64 encoded format if they are stored in a private database.\r\n",
            " Passwords should be salted and hashed using the MD5 algorithm.\r\n",
            " Passwords should be hashed using the SHA-1 algorithm, then salted to provide defence against rainbow table attacks.\r\n\r\nExplanation: sha-1 is not considered secure anymore: https://en.wikipedia.org/wiki/SHA-1#Attacks . With bcrypt you can select more complex hashes https://en.wikipedia.org/wiki/Bcrypt\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q53. What methods does this Pointcut expression reference?",
        "options": [
            " any join point where the target object has a @Loggable annotation\r\n",
            " any join point where the executing method has a @Loggable annotation\r\n",
            " any method that implements Loggable\r\n",
            " any method that extends Loggable\r\n\r\nReference: [Difference between @target and @within (Spring AOP)](https://stackoverflow.com/questions/51124771/difference-between-target-and-within-spring-aop)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q54. What is printed when this code is run as a @SpringBootApplication?",
        "code": "java\r\n@Component\r\npublic class Test implements InitializingBean {\r\n     @Autowired\r\n     ApplicationContext context;\r\n\r\n     @Autowired\r\n     SimpleDateFormat formatter;\r\n\r\n     @Override\r\n     public void afterPropertiesSet() throws Exception {\r\n          System.out.println(context.containsBean(\"formatter\"));\r\n          System.out.println(formatter.getClass());\r\n     }\r\n}\r\n@Configuration\r\nclass TestConfig2 {\r\n    @Bean\r\n    public final SimpleDateFormat formatter() {\r\n        return new SimpleDateFormat();\r\n    }\r\n}\r\n",
        "options": [
            " true <br />\r\n      &emsp; class java.text.SimpleDateFormat <br />\r\n",
            " true <br />\r\n      &emsp; SimpleDateFormat <br />\r\n",
            " a NullPointerException stacktrace\r\n",
            " a BeanDefinitionParsingException stacktrace\r\n\r\nExplanation: `@Bean`-method in `@Configuration` must be overridable. Remove the `final` keyword to fix.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q55. What is the purpose of a web application context?",
        "options": [
            " Configures a web application that is able to be deleted and re-created during runtime through hot swap. It adds a **recreateContext()** method and defines a root WebDaemon that must be bound to in the bootstrap process.\r\n",
            " It configures a Spring application that is able to be modified on the fly during runtime through bytecode re-encoding. Also it adds an **updateContext()** method and defines a root WebServlet that must be bound to in the bootstrap process.\r\n",
            " It provides configuration for a web application that is read-only while running. Also, it adds a **getServletContext()** method and defines an attribute name to which the root context must be bound in the bootstrap process.\r\n",
            " It provides configuration for a Spring application that is updatable on the fly during runtime through bytecode weaving. Also it adds an **updateServletContext()** method and defines a root servlet that must be bound to in the bootstrap process.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q56. What is Spring AOP?",
        "options": [
            " Aspect-Oriented Programming allows you to define different cross-cutting aspects that isolate beans to be available only in certain environments and profiles.\r\n",
            " Aspect-Oriented Programming enables you to perform profiling, which lets you develop different cross-cutting JVM performance-tuning profiles for different aspects of your applications.\r\n",
            " Aspect-Oriented Programming enables the modularization of cross-cutting concerns so that repeated boilerplate logic, such as logging code, does not pollute business logic.\r\n",
            " Aspect-Oriented Programming enables you to persist cross-cutting data across modularized shards of your database.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q57. Assuming username and password authentication is in place, what method on the Authentication object can be used to obtain the username?",
        "options": [
            " getPrincipal\r\n",
            " getUsername\r\n",
            " getUser\r\n",
            " getDn\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q58. Assuming no additional configuration is provided, what is the first selection criteria Spring uses to choose a bean when autowiring a property?",
        "options": [
            " none of these answers\r\n",
            " bean type\r\n",
            " bean size\r\n",
            " bean name\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q60. What effect does private static have on the object service below?",
        "code": "java\r\n@SpringBootApplication\r\npublic class Question14 {\r\n    @Autowired\r\n    private static Service service;\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Question14.class, args);\r\n    }\r\n}\r\n\r\n@Component\r\nclass Service {}\r\n",
        "options": [
            " The application will result in a compile error because you can't autowire a private variable.\r\n",
            " The application will compile and run, and service will have its dependency correctly injected by Spring.\r\n",
            " The application will compile and run, but service will not be autowired because you cannot autowire a static class member.\r\n",
            " The application will result in a compile error because you attempted to autowire a static variable.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q61. What is a security context?",
        "options": [
            " The security context includes details of the principal currently using the app, which is stored by default in a `ThreadLocal` in an `Authentication` object.\r\n",
            " The security context holds a list of all users and their encrypted passwords in memory and a list of resources that users are able to access.\r\n",
            " The security context includes information about safe network IDs and IP addresses that are able to access the system.\r\n",
            " The security context includes information about permissions on the local file system describing how local file resources can be accessed.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q62. How might you map an incoming request to a controller method?",
        "options": [
            " Annotate a Controller class with `@Controller`. Then, using a specific naming convention for the methods, the `RequestMappingHandlerAdapter` will automatically configure your endpoints with the proper HTTP verb and URI.\r\n",
            " Register a controller as a bean. Then, using a specific naming convention for the methods, the `RequestMappingHandlerAdapter` will automatically configure your endpoints based on values from the YAML config file.\r\n",
            " Annotate a controller method with `@RequestMapping`, or a HTTP verb-specific annotation with a String URI pattern parameter (and other params as needed), which is supported through a `RequestMappingHandlerMapping/Adapter`.\r\n",
            " Register a controller as a bean. Then, using a specific naming convention for the methods, the RequestMappingHandlerAdapter will automatically configure your endpoints based on values passed into the bean definition.\r\n\r\nReference: [Spring RequestMapping](https://www.baeldung.com/spring-requestmapping). Spring does not use naming conventions for web requests (unlike e.g. for the Data Repositories)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q63. What methods does the Pointcut expression below reference?",
        "options": [
            " any method with a name that contains the String \"setter\" with a single parameter\r\n",
            " any method with a name that begins with String \"setter\" with a single parameter\r\n",
            " any method with a name that begins with String \"setter\"\r\n",
            " any method with a name that contains the String \"setter\"\r\n      "
        ],
        "correctAns": 3
    },
    {
        "query": " Q64. What pattern does Spring MVC implement to delegate request processing to controllers?",
        "options": [
            " Front Controller\r\n",
            " Facade\r\n",
            " Reactive Chain\r\n",
            " Observer\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q65. What methods does this Pointcut expression?",
        "options": [
            " any join point only within the service package\r\n",
            " This is not valid Pointcut expression\r\n",
            " any method in a class that autowires a service bean\r\n",
            " any join point within the service package or one of its subpackages\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q66. What is the output from invoking this Actuator endpoint in an unmodified Spring Boot application generated using Spring Intializr?",
        "options": [
            " The request would fail because the endpoint is disabled by default.\r\n",
            " The Spring Boot app would return a URL and a list of currently running processes, and ask you to confirm the shutdown command.\r\n",
            " The Spring Boot app would return a URL to confirm the shutdown command.\r\n",
            " The Spring Boot app would begin shutting down.\r\n\r\nReason: By default, all the endpoints are enabled in Spring Boot Application except /shutdown; this is, naturally, part of the Actuator endpoints.\r\n\r\n"
        ],
        "correctAns": 1
    }
]