[
    {
        "query": " Q2. What do the vertical bars represent here?",
        "code": "rust\r\nstr::thread::spawn(|| {\r\n  println!(\"LinkedIn\");\r\n});\r\n",
        "options": [
            " a closure\r\n",
            " a thread\r\n",
            " a future\r\n",
            " a block\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q3. Which choice is not a scalar data type?",
        "options": [
            " integer\r\n",
            " float\r\n",
            " boolean\r\n",
            " tuple\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q4. **\\_** cannot be destructured.",
        "options": [
            " Traits\r\n",
            " Tuples\r\n",
            " Enums\r\n",
            " Structs\r\n\r\n[reference](https://rust-lang.github.io/rfcs/2909-destructuring-assignment.html)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q5. Which `cargo` command checks a program for error without creating a binary executable?",
        "options": [
            " cargo --version\r\n",
            " cargo init\r\n",
            " cargo build\r\n",
            " cargo check\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q6. The term _box_ and related phrases such as _boxing a value_ are often used when relating to memory layout. What does _box_ refer to?",
        "options": [
            " It's creating a pointer on the heap that points to a value on the stack.\r\n",
            " It's creating a pointer on the stack that points to a value on the heap.\r\n",
            " It's creating a memory guard around values to prevent illegal access.\r\n",
            " It's an abstraction that refers to ownership. \"Boxed\" values are clearly labelled.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q7. What is an alternative way of writing `slice` that produces the same result?",
        "code": "rust\r\n...\r\nlet s = String::form(\"hello\");\r\nlet slice = &s[0..2];\r\n",
        "options": [
            " let slice = &s[len + 2];\r\n",
            " let slice = &s[len - 2];\r\n",
            " let slice = &s.copy(0..2);\r\n",
            " let slice = &s[..2];\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q8. Using the `?` operator at the end of an expression is equivalent to **\\_**.",
        "options": [
            " a match pattern that branches into True or False\r\n",
            " calling ok_error()\r\n",
            " calling panic!()\r\n",
            " a match pattern that may result an early return\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q9. Which is valid syntax for defining an array of i32 values?",
        "options": [
            " Array<i32>::with_capacity(10)\r\n",
            " [i32]\r\n",
            " Array<i32>::new(10)\r\n",
            " [i32; 10]\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q10. What syntax is required to take a mutable reference to T, when used within a function argument?",
        "code": "rust\r\nfn increment(i: T) {\r\n  // body elided\r\n}\r\n",
        "options": [
            " \\*mut T\r\n",
            " mut ref T\r\n",
            " mut &T\r\n",
            " &mut T\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q11. The smart pointers Rc and Arc provide reference counting. What is the API for incrementing a reference count?",
        "options": [
            " .add()\r\n",
            " .incr()\r\n",
            " .clone()\r\n",
            " .increment()\r\n\r\n  [reference](https://doc.rust-lang.org/book/ch15-04-rc.html)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q12. What happens when an error occurs that is being handled by the question mark (?) operator?",
        "options": [
            " The error is reported and execution continues.\r\n",
            " An exception is raised. The effect(s) of the exception are defined by the error! macro.\r\n",
            " The program panics immediately.\r\n",
            " Rust attempts to convert the error to the local function's error type and return it as Result::Err. If that fails, the program panics.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q13. Which comment syntax is not legal?",
        "options": [
            " `/*`\r\n",
            " `#`\r\n",
            " `//!`\r\n",
            " `//`\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q14. In matching patterns, values are ignored with \\_.",
        "options": [
            " `.ignore()`\r\n",
            " `an underscore (_)`\r\n",
            " ..\r\n",
            " skip\r\n\r\n"
        ],
        "correctAns": 3
    }
]