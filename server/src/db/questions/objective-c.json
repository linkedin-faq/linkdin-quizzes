[
    {
        "query": " Q1. What is the value of s?",
        "code": "\r\nNSMutableString *s = [NSMutableString stringWithString: @\"123\"];\r\n[s appendString: @\"456\"];\r\n",
        "options": [
            " 123456\r\n",
            " 123\r\n",
            " 456\r\n",
            " This code contains an error.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q2. What's the value of i after these statements?",
        "code": "\r\nNSString *str = nil;\r\nNSInteger i = str.integerValue;\r\n",
        "options": [
            " nil\r\n",
            " 0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)\r\n",
            " -1\r\n",
            " This code crashes.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q3. What value is in str after this line in executed?",
        "options": [
            " This code contains an error\r\n",
            " test\r\n",
            " nil\r\n",
            " test more\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q4. What does this code print?",
        "code": "\r\n    NSPredicate *p2 = [NSPredicate predicateWithBlock:^BOOL(NSString*  evaluatedObject, NSDictionary<NSString *,id> * _Nullable bindings) {\r\n      return evaluatedObject.intValue % 2 == 0;\r\n    }];\r\n    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\r\n    NSArray *n2 = [vals filteredArrayUsingPredicate:p2];\r\n    NSLog(@\"%@\", n2.firstObject);\r\n",
        "options": [
            " 2\r\n",
            " 1,2,3\r\n",
            " 1,2\r\n",
            " Nothing, since this code contains an error.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q5. Property defaults include \\_?",
        "options": [
            " atomic/strong\r\n",
            " atomic/weak\r\n",
            " nonatomic/weak\r\n",
            " nonatomic/strong\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q6. What is the key difference between NSDictionary and NSMutableDictionary?",
        "options": [
            " NSMutableDictionary's values can change\r\n",
            " NSMutableDictionary has not initializers.\r\n",
            " NSDictionary can't be copied.\r\n",
            " NSDictionary's values can change.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q7. What is foo?",
        "options": [
            " A function with a return type of float.\r\n",
            " This code contains an error.\r\n",
            " A variable declaration of type float.\r\n",
            " A property of type float.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q8. What can you glean from this line?",
        "options": [
            " NameHelper is a category of NSString.\r\n",
            " NameHelper is a subclass of NSString.\r\n",
            " NSString implements the NameHelper protocol.\r\n",
            " NSString has a helper class.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q9. What's wrong with this code?",
        "options": [
            " Nothing is wrong with this code.\r\n",
            " Declarations do not need semicolons.\r\n",
            " x=5 is an invalid float.\r\n",
            " Variables can't be declared and initialized in the same state.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q10. How many times with this loop be executed?",
        "code": "\r\nfor (int x=0; x<100; x++) {\r\n  x = x + 1;\r\n}\r\n",
        "options": [
            " 50\r\n",
            " 99\r\n",
            " 100\r\n",
            " This code contains an error.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q11. What is this code an example of?",
        "options": [
            " Key-Value Observing\r\n",
            " Class Value Observing\r\n",
            " Key-Data Observing\r\n",
            " KeyPath Observing\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q12. What does ARC stand for?",
        "options": [
            " Automatic Reference Counting\r\n",
            " Automatic Retain Checking\r\n",
            " Async Retain Cycles\r\n",
            " Automatic Release Code\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q13. What is printed for this code?",
        "code": "\r\nint val = 0;\r\nval = 1.5;\r\nprintf(\"%d\", val);\r\n",
        "options": [
            " 1\r\n",
            " 2\r\n",
            " 0\r\n",
            " This code contains an error.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q14. What best describes class inheritance in Objective-C?",
        "options": [
            " single inheritance but multiple protocol implementation\r\n",
            " Objective-C doesn't support inheritance\r\n",
            " dual class inheritance\r\n",
            " unlimited class inheritance and protocol adherence\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q15. How many keys does this NSDictionary have after this code is executed?",
        "options": [
            " 2\r\n",
            " 4\r\n",
            " 5\r\n",
            " This code contains an error.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q16. What is wrong with this code?",
        "code": "\r\nNSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithCapacity:5];\r\n[dict1 setValue:@\"key\" forKey:@\"value\"];\r\n",
        "options": [
            " The key and value items are mixed\r\n",
            " Nothing is wrong with it\r\n",
            " You can't set the capacity of a dictionary\r\n",
            " NSMutableDictionary doesn't have a :setValue:forKey function.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q17. What is printed from this code?",
        "code": "\r\nNSData *data = [@\"print\" dataUsingEncoding:NSASCIIStringEncoding];\r\nNSLog(@\"%@\", [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]);\r\n",
        "options": [
            " print\r\n",
            " This code is invalid\r\n",
            " Nothing is printed from this code.\r\n",
            " nil\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q18. What is different about this function?",
        "options": [
            " It is static\r\n",
            " It is abstract.\r\n",
            " It is inline.\r\n",
            " This code contains an error.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q19. Structs can have \\_?",
        "options": [
            " functions\r\n",
            " initializers\r\n",
            " fields\r\n",
            " all of these answers\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q20. What is wrong with this code?",
        "code": "\r\n@interface MyClass : NSObject\r\n    @property (strong, nonatomic, readonly) NSString *name;\r\n  @end\r\n",
        "options": [
            " There is nothing wrong with this code.\r\n",
            " There is not read-only directive.\r\n",
            " MyClass doesn't implement NSObject.\r\n",
            " Properties are declared in the implementation.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q21. What is an enums base type for the code below?",
        "options": [
            " There is no base type.\r\n",
            " NSObject\r\n",
            " int\r\n",
            " NSNumber\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q22. If you want to store a small amount of information (e.g., user settings), whats the best, built-in way to go?",
        "options": [
            " UserDefaults\r\n",
            " plist file\r\n",
            " CoreData\r\n",
            " TextFile\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q23. What are categories used for?",
        "options": [
            " to extend other classes\r\n",
            " to manage access control\r\n",
            " to coordinate objects\r\n",
            " to group classes\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q24. What is this Objective-C code checking?",
        "code": "\r\nif ([keyPath isInstanceOf:[NSString class]]) {\r\n}\r\n",
        "options": [
            " This code contains an error\r\n",
            " if keyPath is an instance of NSString\r\n",
            " if keyPath's baseclass is the same as NSString's baseclass\r\n",
            " if keyPath implements the same methods as NSString\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q25. What is this a declaration of?",
        "options": [
            " an Extension\r\n",
            " a Generic\r\n",
            " a block of code\r\n",
            " an abstract class\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q26. For observing changes to a property, which of these two statements cause the related method to be called and why?",
        "code": "\r\n1. _val = 1;\r\n2. self.val= 100;\r\n",
        "options": [
            " Statement 2, since it calls the auto-created setter on the property.\r\n",
            " Statement 1, since it uses the property directly.\r\n",
            " Statement 2, since it specifies the class instance to use.\r\n",
            " Statement 1, since it calls the auto-created setter on the property.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q27. What is wrong with this code?",
        "code": "\r\nfloat x = 2.0;\r\nint(^foo)(int) = ^(int n1) {\r\n  return (int)(n1*x);\r\n};\r\nfoo(5);\r\n",
        "options": [
            " Ints and floats can't be multiplied.\r\n",
            " The parameter isn't declared correctly.\r\n",
            " x is not in the right scope.\r\n",
            " Nothing is wrong with this code.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q28. What's the difference between an array and a set?",
        "options": [
            " Arrays are ordered, non-unique values.\r\n",
            " Arrays are stored sorted.\r\n",
            " Sets are ordered, unique values.\r\n",
            " Sets can contain nils.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q29. Dot notation can be used for \\_?",
        "options": [
            " nothing, as they're never used in Objective-C\r\n",
            " function calls only\r\n",
            " property getter/setter\r\n",
            " parameter delimiters\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q30. What is the value of newVals after this code is executed?",
        "code": "\r\n    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\r\n    NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF.intValue > 1\"];\r\n    NSArray *newVals = [vals filteredArrayUsingPredicate:pred];\r\n",
        "options": [
            " 2,3\r\n",
            " nil\r\n",
            " This code contains an error\r\n",
            " 2,\"3\"\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q31. How would this function be called?",
        "options": [
            " self.foo(5, b:10);\r\n",
            " This code contains an error.\r\n",
            " [self foo:5:10:20];\r\n",
            " [self foo:5 b:10];\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q33. What is significant about this function declaration?",
        "code": "\r\n    -(void)testFunc:(NSString**)str;\r\n",
        "options": [
            " The parameter is passed by value and can not be changed\r\n",
            " \\*\\* is not allowed on a parameter\r\n",
            " The parameter may be nil\r\n",
            " The parameter is passed by reference and may be changed\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q34. What is printed from this code execution?",
        "code": "\r\n    typedef enum {\r\n        thing1,\r\n        thing2,\r\n        thing3\r\n    } Thing;\r\n\r\n\r\n    -(void) enumStuff {\r\n        NSLog(@\"%d\", thing2);\r\n    }\r\n",
        "options": [
            " 0\r\n",
            " 1\r\n",
            " thing2\r\n",
            " This code does not print anything\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q35. You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?",
        "options": [
            " non-atomic\r\n",
            " strong\r\n",
            " weak\r\n",
            " atomic\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q36. What is wrong with this line of code?",
        "code": "\r\nint temp = 1==1;\r\n",
        "options": [
            " `temp` is a keyword.\r\n",
            " 1==1 is invalid.\r\n",
            " 1==1 evaluates to a Boolean.\r\n",
            " Nothing is wrong with it.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q37. What is special about the code within this block?",
        "code": "\r\ndispatch_async(dispatch_get_main_queue(), ^{\r\n// code\r\n});\r\n",
        "options": [
            " It executes on the main queue.\r\n",
            " It is the last code to run before the app goes inactive.\r\n",
            " It executes on a background thread.\r\n",
            " It is queued to execute in the background.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q38. How many items are in set1 after this code executes?",
        "code": "\r\nNSMutableSet *set1 = [NSMutableSet setWithObjects: @1,@2, @3, @4, @5, nil];\r\n[set1 add0bject:@3];\r\n",
        "options": [
            " zero\r\n",
            " six\r\n",
            " one\r\n",
            " five\r\n"
        ],
        "correctAns": 4
    }
]