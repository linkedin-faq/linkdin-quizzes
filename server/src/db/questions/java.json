[
    {
        "query": " Q1. Given the string \"strawberries\" saved in a variable called fruit, what would `fruit.substring(2, 5)` return?",
        "options": [
            " rawb\r\n",
            " raw\r\n",
            " awb\r\n",
            " traw\r\n\r\n**Reasoning:** The substring method is accepting two arguments.\r\n\r\n- The first argument being the index to start(includes that char at 2)\r\n- and the second the index of the string to end the substring(excludes the char at 5).\r\n- Strings in Java are like arrays of chars.\r\n- Therefore, the method will return \"raw\" as those are the chars in indexes 2,3, and 4.\r\n- You can also take the ending index and subtract the beginning index from it, to determine how many chars will be included in the substring (5-2=3).\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q2. How can you achieve runtime polymorphism in Java?",
        "options": [
            " method overloading\r\n",
            " method overrunning\r\n",
            " method overriding\r\n",
            " method calling\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q3. Given the following definitions, which of these expression will **NOT** evaluate to true?",
        "options": [
            " `(i1 | i2) == 3`\r\n",
            " `i2 && b1`\r\n",
            " `b1 || !b2`\r\n",
            " `(i1 ^ i2) < 4`\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q5. What is the output of this code?",
        "code": "java\r\n1: class Main {\r\n2:   public static void main (String[] args) {\r\n3:     int array[] = {1, 2, 3, 4};\r\n4:     for (int i = 0; i < array.size(); i++) {\r\n5:        System.out.print(array[i]);\r\n6:     }\r\n7:   }\r\n8: }\r\n",
        "options": [
            " It will not compile because of line 4.\r\n",
            " It will not compile because of line 3.\r\n",
            " 123\r\n",
            " 1234\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q6. Which of the following can replace the CODE SNIPPET to make the code below print \"Hello World\"?",
        "code": "java\r\ninterface Interface1 {\r\n    static void print() {\r\n        System.out.print(\"Hello\");\r\n    }\r\n}\r\n\r\ninterface Interface2 {\r\n    static void print() {\r\n        System.out.print(\"World!\");\r\n    }\r\n}\r\n",
        "options": [
            " `super1.print(); super2.print();`\r\n",
            " `this.print();`\r\n",
            " `super.print();`\r\n",
            " `Interface1.print(); Interface2.print();`\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q7. What does the following code print?",
        "code": "java\r\nString str = \"abcde\";\r\nstr.trim();\r\nstr.toUpperCase();\r\nstr.substring(3, 4);\r\nSystem.out.println(str);\r\n",
        "options": [
            " CD\r\n",
            " CDE\r\n",
            " D\r\n",
            " \"abcde\"\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q8. What is the result of this code?",
        "code": "java\r\nclass Main {\r\n    public static void main (String[] args){\r\n        System.out.println(print(1));\r\n    }\r\n    static Exception print(int i){\r\n        if (i>0) {\r\n            return new Exception();\r\n        } else {\r\n            throw new RuntimeException();\r\n        }\r\n    }\r\n}\r\n",
        "options": [
            " It will show a stack trace with a runtime exception.\r\n",
            " \"java.lang.Exception\"\r\n",
            " It will run and throw an exception.\r\n",
            " It will not compile.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q9. Which class can compile given these declarations?",
        "code": "java\r\ninterface One {\r\n    default void method() {\r\n        System.out.println(\"One\");\r\n    }\r\n}\r\n\r\ninterface Two {\r\n    default void method () {\r\n        System.out.println(\"One\");\r\n    }\r\n}\r\n",
        "options": [
            " A\r\n\r\n```java\r\nclass Three implements One, Two {\r\n    public void method() {\r\n        super.One.method();\r\n    }\r\n}\r\n```\r\n\r\n",
            " B\r\n\r\n```java\r\nclass Three implements One, Two {\r\n    public void method() {\r\n        One.method();\r\n    }\r\n}\r\n```\r\n\r\n",
            " C\r\n\r\n```java\r\nclass Three implements One, Two {\r\n}\r\n```\r\n\r\n",
            " D\r\n\r\n```java\r\nclass Three implements One, Two {\r\n    public void method() {\r\n        One.super.method();\r\n    }\r\n}\r\n```\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q10. What is the output of this code?",
        "code": "java\r\nclass Main {\r\n    public static void main (String[] args) {\r\n        List list = new ArrayList();\r\n        list.add(\"hello\");\r\n        list.add(2);\r\n        System.out.print(list.get(0) instanceof Object);\r\n        System.out.print(list.get(1) instanceof Integer);\r\n    }\r\n}\r\n",
        "options": [
            " The code does not compile.\r\n",
            " truefalse\r\n",
            " truetrue\r\n",
            " falsetrue\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q11. Given the following two classes, what will be the output of the Main class?",
        "code": "java\r\npackage mypackage;\r\npublic class Math {\r\n    public static int abs(int num){\r\n        return num < 0 ? -num : num;\r\n    }\r\n}\r\npackage mypackage.elementary;\r\npublic class Math {\r\n    public static int abs (int num) {\r\n        return -num;\r\n    }\r\n}\r\n\r\n\r\njava\r\nimport mypackage.Math;\r\nimport mypackage.elementary.*;\r\n\r\nclass Main {\r\n    public static void main (String args[]){\r\n        System.out.println(Math.abs(123));\r\n    }\r\n}\r\n",
        "options": [
            " Lines 1 and 2 generate compiler errors due to class name conflicts.\r\n",
            " \"-123\"\r\n",
            " It will throw an exception on line 5.\r\n",
            " \"123\"\r\n\r\n**Explanation:** `The answer is \"123\". The `abs()` method evaluates to the one inside mypackage.Math class.`\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q12. What is the result of this code?",
        "code": "java\r\n1: class MainClass {\r\n2:  final String message(){\r\n3:      return \"Hello!\";\r\n4:  }\r\n5: }\r\n\r\n6: class Main extends MainClass {\r\n7:  public static void main(String[] args) {\r\n8:      System.out.println(message());\r\n9:  }\r\n\r\n10: String message(){\r\n11:     return \"World!\";\r\n12:  }\r\n13: }\r\n",
        "options": [
            " It will not compile because of line 10.\r\n",
            " \"Hello!\"\r\n",
            " It will not compile because of line 2.\r\n",
            " \"World!\"\r\n\r\n**Explanation:** Compilation error at line 10 because of final methods cannot be overridden, and here message() is a final method,\r\nand also note that Non-static method message() cannot be referenced from a static context.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q13. Given this code, which command will output \"2\"?",
        "code": "java\r\nclass Main {\r\n    public static void main(String[] args) {\r\n        System.out.println(args[2]);\r\n    }\r\n}\r\n",
        "options": [
            " `java Main 1 2 \"3 4\" 5`\r\n",
            " `java Main 1 \"2\" \"2\" 5`\r\n",
            " `java Main.class 1 \"2\" 2 5`\r\n",
            " `java Main 1 \"2\" \"3 4\" 5`\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q14. What is the output of this code?",
        "code": "java\r\nclass Main {\r\n    public static void main(String[] args){\r\n        int a = 123451234512345;\r\n        System.out.println(a);\r\n    }\r\n}\r\n",
        "options": [
            " \"123451234512345\"\r\n",
            " Nothing - this will not compile.\r\n",
            " a negative integer value\r\n",
            " \"12345100000\"\r\n\r\n**Reasoning:** The int type in Java can be used to represent any whole number from -2147483648 to 2147483647. Therefore this code will not compile as the number assigned to 'a' is larger than the int type can hold.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q15. What is the output of this code?",
        "code": "java\r\nclass Main {\r\n    public static void main (String[] args) {\r\n        String message = \"Hello world!\";\r\n        String newMessage = message.substring(6, 12)\r\n            + message.substring(12, 6);\r\n        System.out.println(newMessage);\r\n    }\r\n}\r\n",
        "options": [
            " The code does not compile.\r\n",
            " A runtime exception is thrown.\r\n",
            " \"world!!world\"\r\n",
            " \"world!world!\"\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q16. How do you write a foreach loop that will iterate over ArrayList\\<Pencil\\>pencilCase?",
        "options": [
            " `for (Pencil pencil : pencilCase) {}`\r\n",
            " `for (pencilCase.next()) {}`\r\n",
            " `for (Pencil pencil : pencilCase.iterator()) {}`\r\n",
            " `for (pencil in pencilCase) {}`\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q19. What does this code print?",
        "code": "java\r\nSystem.out.print(\"apple\".compareTo(\"banana\"));\r\n",
        "options": [
            " `0`\r\n",
            " positive number\r\n",
            " negative number\r\n",
            " compilation error\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q20. You have an ArrayList of names that you want to sort alphabetically. Which approach would **NOT** work?",
        "options": [
            " `names.sort(Comparator.comparing(String::toString))`\r\n",
            " `Collections.sort(names)`\r\n",
            " `names.sort(List.DESCENDING)`\r\n",
            " `names.stream().sorted((s1, s2) -> s1.compareTo(s2)).collect(Collectors.toList())`\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q21. By implementing encapsulation, you cannot directly access the class's \\_ properties unless you are writing code inside the class itself.",
        "options": [
            " private\r\n",
            " protected\r\n",
            " no-modifier\r\n",
            " public\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q22. Which is the most up-to-date way to instantiate the current date?",
        "options": [
            " `new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())`\r\n",
            " `new Date(System.currentTimeMillis())`\r\n",
            " `LocalDate.now()`\r\n",
            " `Calendar.getInstance().getTime()`\r\n\r\n**Explanation**: LocalDate is newest class added in java 8\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q23. Fill in the blank to create a piece of code that will tell whether `int0` is divisible by `5`:",
        "options": [
            " `int0 / 5 ? true: false`\r\n",
            " `int0 % 5 == 0`\r\n",
            " `int0 % 5 != 5`\r\n",
            " `Math.isDivisible(int0, 5)`\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q24. How many times will this code print \"Hello World!\"?",
        "code": "java\r\nclass Main {\r\n    public static void main(String[] args){\r\n        for (int i=0; i<10; i=i++){\r\n            i+=1;\r\n            System.out.println(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n",
        "options": [
            " 10 times\r\n",
            " 9 times\r\n",
            " 5 times\r\n",
            " infinite number of times\r\n\r\n**Explanation**: Observe the loop increment. It's not an increment, it's an assignment(post).\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q25. The runtime system starts your program by calling which function first?",
        "options": [
            " print\r\n",
            " iterative\r\n",
            " hello\r\n",
            " main\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " 26. What code would you use in Constructor A to call Constructor B?",
        "code": "java\r\npublic class Jedi {\r\n  /* Constructor A */\r\n  Jedi(String name, String species){}\r\n\r\n  /* Constructor B */\r\n  Jedi(String name, String species, boolean followsTheDarkSide){}\r\n  }\r\n",
        "options": [
            " Jedi(name, species, false)\r\n",
            " new Jedi(name, species, false)\r\n",
            " this(name, species, false)\r\n",
            " super(name, species, false)\r\n\r\n  **Note:** This code won't compile, possibly broken code sample.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q27. Which statement is **NOT** true?",
        "options": [
            " An anonymous class may specify an abstract base class as its base type.\r\n",
            " An anonymous class does not require a zero-argument constructor.\r\n",
            " An anonymous class may specify an interface as its base type.\r\n",
            " An anonymous class may specify both an abstract class and interface as base types.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q28. What will this program print out to the console when executed?",
        "code": "java\r\nimport java.util.LinkedList;\r\n\r\npublic class Main {\r\n    public static void main(String[] args){\r\n        LinkedList<Integer> list = new LinkedList<>();\r\n        list.add(5);\r\n        list.add(1);\r\n        list.add(10);\r\n        System.out.println(list);\r\n    }\r\n}\r\n",
        "options": [
            " [5, 1, 10]\r\n",
            " [10, 5, 1]\r\n",
            " [1, 5, 10]\r\n",
            " [10, 1, 5]\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q29. What is the output of this code?",
        "code": "java\r\nclass Main {\r\n    public static void main(String[] args){\r\n       String message = \"Hello\";\r\n       for (int i = 0; i<message.length(); i++){\r\n          System.out.print(message.charAt(i+1));\r\n       }\r\n    }\r\n}\r\n",
        "options": [
            " \"Hello\"\r\n",
            " A runtime exception is thrown.\r\n",
            " The code does not compile.\r\n",
            " \"ello\"\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q30. Object-oriented programming is a style of programming where you organize your program around \\_ rather than \\_ and data rather than logic.",
        "options": [
            " functions; actions\r\n",
            " objects; actions\r\n",
            " actions; functions\r\n",
            " actions; objects\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q31. What statement returns true if \"nifty\" is of type String?",
        "options": [
            " `\"nifty\".getType().equals(\"String\")`\r\n",
            " `\"nifty\".getType() == String`\r\n",
            " `\"nifty\".getClass().getSimpleName() == \"String\"`\r\n",
            " `\"nifty\" instanceof String`\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q32. What is the output of this code?",
        "code": "java\r\nimport java.util.*;\r\nclass Main {\r\n\tpublic static void main(String[] args) {\r\n\t\tList<Boolean> list = new ArrayList<>();\r\n\t\tlist.add(true);\r\n\t\tlist.add(Boolean.parseBoolean(\"FalSe\"));\r\n\t\tlist.add(Boolean.TRUE);\r\n\t\tSystem.out.print(list.size());\r\n\t\tSystem.out.print(list.get(1) instanceof Boolean);\r\n\t}\r\n}\r\n",
        "options": [
            " A runtime exception is thrown.\r\n",
            " 3false\r\n",
            " 2true\r\n",
            " 3true\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q33. What is the result of this code?",
        "code": "java\r\n1: class Main {\r\n2: \tObject message(){\r\n3: \t\treturn \"Hello!\";\r\n4: \t}\r\n5: \tpublic static void main(String[] args) {\r\n6: \t\tSystem.out.print(new Main().message());\r\n7: \t\tSystem.out.print(new Main2().message());\r\n8: \t}\r\n9: }\r\n10: class Main2 extends Main {\r\n11: \tString message(){\r\n12: \t\treturn \"World!\";\r\n13: \t}\r\n14: }\r\n",
        "options": [
            " It will not compile because of line 7.\r\n",
            " Hello!Hello!\r\n",
            " Hello!World!\r\n",
            " It will not compile because of line 11.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q34. What method can be used to create a new instance of an object?",
        "options": [
            " another instance\r\n",
            " field\r\n",
            " constructor\r\n",
            " private method\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q35. Which is the most reliable expression for testing whether the values of two string variables are the same?",
        "options": [
            " string1 == string2\r\n",
            " string1 = string2\r\n",
            " string1.matches(string2)\r\n",
            " string1.equals(string2)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q36. Which letters will print when this code is run?",
        "code": "java\r\npublic static void main(String[] args) {\r\n\ttry {\r\n\t\tSystem.out.println(\"A\");\r\n\t\tbadMethod();\r\n\t\tSystem.out.println(\"B\");\r\n\t} catch (Exception ex) {\r\n\t\tSystem.out.println(\"C\");\r\n\t} finally {\r\n\t\tSystem.out.println(\"D\");\r\n\t}\r\n}\r\npublic static void badMethod() {\r\n\tthrow new Error();\r\n}\r\n",
        "options": [
            " A, B, and D\r\n",
            " A, C, and D\r\n",
            " C and D\r\n",
            " A and D\r\n\r\n**Explanation**: `Error` is not inherited from `Exception`\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q37. What is the output of this code?",
        "code": "java\r\nclass Main {\r\n\tstatic int count = 0;\r\n\tpublic static void main(String[] args) {\r\n\t\tif (count < 3) {\r\n\t\t\tcount++;\r\n\t\t\tmain(null);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSystem.out.println(\"Hello World!\");\r\n\t}\r\n}\r\n",
        "options": [
            " It will throw a runtime exception.\r\n",
            " It will not compile.\r\n",
            " It will print \"Hello World!\" three times.\r\n",
            " It will run forever.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q38. What is the output of this code?",
        "code": "java\r\nimport java.util.*;\r\nclass Main {\r\n\tpublic static void main(String[] args) {\r\n\t\tString[] array = {\"abc\", \"2\", \"10\", \"0\"};\r\n\t\tList<String> list = Arrays.asList(array);\r\n\t\tCollections.sort(list);\r\n\t\tSystem.out.println(Arrays.toString(array));\r\n\t}\r\n}\r\n",
        "options": [
            " [abc, 0, 2, 10]\r\n",
            " The code does not compile.\r\n",
            " [abc, 2, 10, 0]\r\n",
            " [0, 10, 2, abc]\r\n\r\n**Explanation**: The `java.util.Arrays.asList(T... a)` returns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q39. What is the output of this code?",
        "code": "java\r\nclass Main {\r\n\tpublic static void main(String[] args) {\r\n\t\tString message = \"Hello\";\r\n\t\tprint(message);\r\n\t\tmessage += \"World!\";\r\n\t\tprint(message);\r\n\t}\r\n\tstatic void print(String message){\r\n\t\tSystem.out.print(message);\r\n\t\tmessage += \" \";\r\n\t}\r\n}\r\n",
        "options": [
            " Hello World!\r\n",
            " HelloHelloWorld!\r\n",
            " Hello Hello World!\r\n",
            " Hello HelloWorld!\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q40. What is displayed when this code is compiled and executed?",
        "code": "java\r\npublic class Main {\r\n\tpublic static void main(String[] args) {\r\n\t\tint x = 5;\r\n\t\tx = 10;\r\n\t\tSystem.out.println(x);\r\n\t}\r\n}\r\n",
        "options": [
            " x\r\n",
            " null\r\n",
            " 10\r\n",
            " 5\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q41. Which approach cannot be used to iterate over a List named _theList_?",
        "code": null,
        "options": [
            " A\r\n\r\n```java\r\nfor (int i = 0; i < theList.size(); i++) {\r\n    System.out.println(theList.get(i));\r\n}\r\n```\r\n\r\n",
            " B\r\n\r\n```java\r\nfor (Object object : theList) {\r\n    System.out.println(object);\r\n}\r\n```\r\n\r\n",
            " C\r\n\r\n```java\r\nIterator it = theList.iterator();\r\nfor (it.hasNext()) {\r\n    System.out.println(it.next());\r\n}\r\n```\r\n\r\n",
            " D\r\n\r\n```java\r\ntheList.forEach(System.out::println);\r\n```\r\n\r\n**Explanation:** `for (it.hasNext())` should be `while (it.hasNext())`.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q42. What method signature will work with this code?",
        "options": [
            " public void isHealthy(String avocado)\r\n",
            " boolean isHealthy(String string)\r\n",
            " public isHealthy(\"avocado\")\r\n",
            " private String isHealthy(String food)\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q43. Which are valid keywords in a Java module descriptor (module-info.java)?",
        "options": [
            " provides, employs\r\n",
            " imports, exports\r\n",
            " consumes, supplies\r\n",
            " requires, exports\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q44. Which type of variable keeps a constant value once it is assigned?",
        "options": [
            " non-static\r\n",
            " static\r\n",
            " final\r\n",
            " private\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q45. How does the keyword `volatile` affect how a variable is handled?",
        "options": [
            " It will be read by only one thread at a time.\r\n",
            " It will be stored on the hard drive.\r\n",
            " It will never be cached by the CPU.\r\n",
            " It will be preferentially garbage collected.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q46. What is the result of this code?",
        "code": "java\r\nchar smooch = 'x';\r\nSystem.out.println((int) smooch);\r\n",
        "options": [
            " an alphanumeric character\r\n",
            " a negative number\r\n",
            " a positive number\r\n",
            " a ClassCastException\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q47. You get a NullPointerException. What is the most likely cause?",
        "options": [
            " A file that needs to be opened cannot be found.\r\n",
            " A network connection has been lost in the middle of communications.\r\n",
            " Your code has used up all available memory.\r\n",
            " The object you are using has not been instantiated.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q48. How would you fix this code so that it compiles?",
        "code": "java\r\npublic class Nosey {\r\n\tint age;\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(\"Your age is: \" + age);\r\n\t}\r\n}\r\n",
        "options": [
            " Make age static.\r\n",
            " Make age global.\r\n",
            " Make age public.\r\n",
            " Initialize age to a number.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q49. Add a Duck called \"Waddles\" to the ArrayList **ducks**.",
        "code": "java\r\npublic class Duck {\r\n\tprivate String name;\r\n\tDuck(String name) {}\r\n}\r\n",
        "options": [
            " `Duck waddles = new Duck();`\r\n      `ducks.add(waddles);`\r\n",
            " `Duck duck = new Duck(\"Waddles\");`\r\n      `ducks.add(waddles);`\r\n",
            " `ducks.add(new Duck(\"Waddles\"));`\r\n",
            " `ducks.add(new Waddles());`\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q50. If you encounter `UnsupportedClassVersionError` it means the code was `___` on a newer version of Java than the JRE `___` it.",
        "options": [
            " executed; interpreting\r\n",
            " executed; compiling\r\n",
            " compiled; executing\r\n",
            " compiled, translating\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q51. Given this class, how would you make the code compile?",
        "code": "java\r\npublic class TheClass {\r\n    private final int x;\r\n}\r\n",
        "options": [
            " A\r\n\r\n```java\r\npublic TheClass() {\r\n    x += 77;\r\n}\r\n```\r\n\r\n",
            " B\r\n\r\n```java\r\npublic TheClass() {\r\n    x = null;\r\n}\r\n```\r\n\r\n",
            " C\r\n\r\n```java\r\npublic TheClass() {\r\n    x = 77;\r\n}\r\n```\r\n\r\n",
            " D\r\n\r\n```java\r\nprivate void setX(int x) {\r\n    this.x = x;\r\n}\r\npublic TheClass() {\r\n    setX(77);\r\n}\r\n```\r\n\r\n**Explanation:** `final` class members are allowed to be assigned only in three places: declaration, constructor or an instance-initializer block.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q52. How many times f will be printed?",
        "code": "java\r\npublic class Solution {\r\n    public static void main(String[] args) {\r\n        for (int i = 44; i > 40; i--) {\r\n            System.out.println(\"f\");\r\n        }\r\n    }\r\n}\r\n",
        "options": [
            " 4\r\n",
            " 3\r\n",
            " 5\r\n",
            " A Runtime exception will be thrown\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q53. Which statements about `abstract` classes are true?",
        "code": "\r\n1. They can be instantiated.\r\n2. They allow member variables and methods to be inherited by subclasses.\r\n3. They can contain constructors.\r\n",
        "options": [
            " 1, 2, and 3\r\n",
            " only 3\r\n",
            " 2 and 3\r\n",
            " only 2\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q54. Which keyword lets you call the constructor of a parent class?",
        "options": [
            " parent\r\n",
            " super\r\n",
            " this\r\n",
            " new\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q55. What is the result of this code?",
        "code": "java\r\n  1: int a = 1;\r\n  2: int b = 0;\r\n  3: int c = a/b;\r\n  4: System.out.println(c);\r\n",
        "options": [
            " It will throw an ArithmeticException.\r\n",
            " It will run and output 0.\r\n",
            " It will not compile because of line 3.\r\n",
            " It will run and output infinity.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q56. Normally, to access a static member of a class such as Math.PI, you would need to specify the class \"Math\". What would be the best way to allow you to use simply \"PI\" in your code?",
        "options": [
            " Add a static import.\r\n",
            " Declare local copies of the constant in your code.\r\n",
            " This cannot be done. You must always qualify references to static members with the class form which they came from.\r\n",
            " Put the static members in an interface and inherit from that interface.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q57. Which keyword lets you use an interface?",
        "options": [
            " extends\r\n",
            " implements\r\n",
            " inherits\r\n",
            " import\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q58. Why are ArrayLists better than arrays?",
        "options": [
            " You don't have to decide the size of an ArrayList when you first make it.\r\n",
            " You can put more items into an ArrayList than into an array.\r\n",
            " ArrayLists can hold more kinds of objects than arrays.\r\n",
            " You don't have to decide the type of an ArrayList when you first make it.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q60. Use the magic power to cast a spell",
        "code": "java\r\npublic class MagicPower {\r\n    void castSpell(String spell) {}\r\n}\r\n",
        "options": [
            " `new MagicPower().castSpell(\"expecto patronum\")`\r\n",
            " `MagicPower magicPower = new MagicPower();`\r\n      `magicPower.castSpell();`\r\n",
            " `MagicPower.castSpell(\"expelliarmus\");`\r\n",
            " `new MagicPower.castSpell();`\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q61. What language construct serves as a blueprint containing an object's properties and functionality?",
        "options": [
            " constructor\r\n",
            " instance\r\n",
            " class\r\n",
            " method\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q62. What does this code print?",
        "code": "java\r\npublic static void main(String[] args) {\r\n    int x=5,y=10;\r\n    swapsies(x,y);\r\n    System.out.println(x+\" \"+y);\r\n}\r\n\r\nstatic void swapsies(int a, int b) {\r\n    int temp=a;\r\n    a=b;\r\n    b=temp;\r\n}\r\n",
        "options": [
            " 10 10\r\n",
            " 5 10\r\n",
            " 10 5\r\n",
            " 5 5\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q63. What is the result of this code?",
        "code": "java\r\ntry {\r\n    System.out.println(\"Hello World\");\r\n} catch (Exception e) {\r\n    System.out.println(\"e\");\r\n} catch (ArithmeticException e) {\r\n    System.out.println(\"e\");\r\n} finally {\r\n    System.out.println(\"!\");\r\n}\r\n",
        "options": [
            " Hello World\r\n",
            " It will not compile because the second catch statement is unreachable\r\n",
            " Hello World!\r\n",
            " It will throw runtime exception\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q64. Which is not a java keyword",
        "options": [
            " finally\r\n",
            " native\r\n",
            " interface\r\n",
            " unsigned\r\n\r\n**Explanation:** `native` is a part of JNI interface\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q65. Which operator would you use to find the remainder after division?",
        "options": [
            " `%`\r\n",
            " `//`\r\n",
            " `/`\r\n",
            " `DIV`\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q66. Which choice is a disadvantage of inheritance?",
        "options": [
            " Overridden methods of the parent class cannot be reused.\r\n",
            " Responsibilities are not evenly distributed between parent and child classes.\r\n",
            " Classes related by inheritance are tightly coupled to each other.\r\n",
            " The internal state of the parent class is accessible to its children.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q67. Declare and initialize an array of 10 ints.",
        "options": [
            " `Array<Integer> numbers = new Array<Integer>(10);`\r\n",
            " `Array[int] numbers = new Array[int](10);`\r\n",
            " `int[] numbers = new int[10];`\r\n",
            " `int numbers[] = int[10];`\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q68. Refactor this event handler to a lambda expression:",
        "code": "java\r\ngroucyButton.addActionListener(new ActionListener() {\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        System.out.println(\"Press me one more time..\");\r\n    }\r\n});\r\n",
        "options": [
            " `groucyButton.addActionListener(ActionListener listener -> System.out.println(\"Press me one more time...\"));`\r\n",
            " `groucyButton.addActionListener((event) -> System.out.println(\"Press me one more time...\"));`\r\n",
            " `groucyButton.addActionListener(new ActionListener(ActionEvent e) {() -> System.out.println(\"Press me one more time...\");});`\r\n",
            " `groucyButton.addActionListener(() -> System.out.println(\"Press me one more time...\"));`\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q69. Which functional interfaces does Java provide to serve as data types for lambda expressions?",
        "options": [
            " Observer, Observable\r\n",
            " Collector, Builder\r\n",
            " Filter, Map, Reduce\r\n",
            " Consumer, Predicate, Supplier\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q69. What is a valid use of the hashCode() method?",
        "options": [
            " encrypting user passwords\r\n",
            " deciding if two instances of a class are equal\r\n",
            " enabling HashMap to find matches faster\r\n",
            " moving objects from a List to a HashMap\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q70. What kind of relationship does \"extends\" denote?",
        "options": [
            " uses-a\r\n",
            " is-a\r\n",
            " has-a\r\n",
            " was-a\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q71. How do you force an object to be garbage collected?",
        "options": [
            " Set object to null and call Runtime.gc()\r\n",
            " Set object to null and call System.gc()\r\n",
            " Set object to null and call Runtime.getRuntime().runFinalization()\r\n",
            " There is no way to force an object to be garbage collected\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q72. Java programmers commonly use design patterns. Some examples are the **\\_**, which helps create instances of a class, the **\\_**, which ensures that only one instance of a class can be created; and the **\\_**, which allows for a group of algorithms to be interchangeable.",
        "options": [
            " static factory method; singleton; strategy pattern\r\n",
            " strategy pattern; static factory method; singleton\r\n",
            " creation pattern; singleton; prototype pattern\r\n",
            " singleton; strategy pattern; static factory method\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q73. Using Java's Reflection API, you can use \\_ to get the name of a class and \\_ to retrieve an array of its methods.",
        "options": [
            " this.getClass().getSimpleName(); this.getClass().getDeclaredMethods()\r\n",
            " this.getName(); this.getMethods()\r\n",
            " Reflection.getName(this); Reflection.getMethods(this)\r\n",
            " Reflection.getClass(this).getName(); Reflection.getClass(this).getMethods()\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q74. Which is not a valid lambda expression?",
        "options": [
            " `a -> false;`\r\n",
            " `(a) -> false;`\r\n",
            " `String a -> false;`\r\n",
            " `(String a) -> false;`\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q75. Which access modifier makes variables and methods visible only in the class where they are declared?",
        "options": [
            " public\r\n",
            " protected\r\n",
            " nonmodifier\r\n",
            " private\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q76. What type of variable can be assigned to only once?",
        "options": [
            " private\r\n",
            " non-static\r\n",
            " final\r\n",
            " static\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q77. How would you convert a String to an Int?",
        "options": [
            " `\"21\".intValue()`\r\n",
            " `String.toInt(\"21\")`\r\n",
            " `Integer.parseInt(\"21\")`\r\n",
            " `String.valueOf(\"21\")`\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q78. What method should be added to the Duck class to print the name Moby?",
        "code": "java\r\npublic class Duck {\r\n    private String name;\r\n\r\n    Duck(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(new Duck(\"Moby\"));\r\n    }\r\n}\r\n",
        "options": [
            " `public String toString() { return name; } `\r\n",
            " `public void println() { System.out.println(name); } `\r\n",
            " `String toString() { return this.name; } `\r\n",
            " `public void toString() { System.out.println(this.name); } `\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q79. Which operator is used to concatenate Strings in Java",
        "options": [
            " `+`\r\n",
            " `&`\r\n",
            " `.`\r\n",
            " `-`\r\n\r\n- "
        ],
        "correctAns": 1
    },
    {
        "query": " Q80. How many times does this loop print \"exterminate\"?",
        "code": "java\r\nfor (int i = 44; i > 40; i--) {\r\n    System.out.println(\"exterminate\");\r\n}\r\n",
        "options": [
            " two\r\n",
            " four\r\n",
            " three\r\n",
            " five\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q81. What is the value of myCharacter after line 3 is run?",
        "code": "java\r\n1: public class Main {\r\n2:   public static void main (String[] args) {\r\n3:     char myCharacter = \"piper\".charAt(3);\r\n4:   }\r\n5: }\r\n",
        "options": [
            " p\r\n",
            " r\r\n",
            " e\r\n",
            " i\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q82. When should you use a static method?",
        "options": [
            " when your method is related to the object's characteristics\r\n",
            " when you want your method to be available independently of class instances\r\n",
            " when your method uses an object's instance variable\r\n",
            " when your method is dependent on the specific instance that calls it\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q83. What phrase indicates that a function receives a copy of each argument passed to it rather than a reference to the objects themselves?",
        "options": [
            " pass by reference\r\n",
            " pass by occurrence\r\n",
            " pass by value\r\n",
            " API call\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q84. In Java, what is the scope of a method's argument or parameter?",
        "options": [
            " inside the method\r\n",
            " both inside and outside the method\r\n",
            " neither inside nor outside the method\r\n",
            " outside the method\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q85. What is the output of this code?",
        "code": "java\r\npublic class Main {\r\n  public static void main (String[] args) {\r\n    int[] sampleNumbers = {8, 5, 3, 1};\r\n    System.out.println(sampleNumbers[2]);\r\n  }\r\n}\r\n",
        "options": [
            " 5\r\n",
            " 8\r\n",
            " 1\r\n",
            " 3\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q86. Which change will make this code compile successfully?",
        "code": "java\r\n1: public class Main {\r\n2:   String MESSAGE =\"Hello!\";\r\n3:   static void print(){\r\n4:     System.out.println(message);\r\n5:   }\r\n6:   void print2(){}\r\n7: }\r\n",
        "options": [
            " Change line 2 to `public static final String message`\r\n",
            " Change line 6 to `public void print2(){}`\r\n",
            " Remove the body of the `print2` method and add a semicolon.\r\n",
            " Remove the body of the `print` method.\r\n\r\n**Explanation**: Changing line 2 to `public static final String message` raises the error `message not initialized in the default constructor`\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q87. What is the output of this code?",
        "code": "java\r\nimport java.util.*;\r\nclass Main {\r\n  public static void main(String[] args) {\r\n    String[] array = new String[]{\"A\", \"B\", \"C\"};\r\n    List<String> list1 = Arrays.asList(array);\r\n    List<String> list2 = new ArrayList<>(Arrays.asList(array));\r\n    List<String> list3 = new ArrayList<>(Arrays.asList(\"A\", new String(\"B\"), \"C\"));\r\n    System.out.print(list1.equals(list2));\r\n    System.out.print(list1.equals(list3));\r\n  }\r\n}\r\n",
        "options": [
            " falsefalse\r\n",
            " truetrue\r\n",
            " falsetrue\r\n",
            " truefalse\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q88. Which code snippet is valid?",
        "options": [
            " `ArrayList<String> words = new ArrayList<String>(){\"Hello\", \"World\"};`\r\n",
            " `ArrayList words = Arrays.asList(\"Hello\", \"World\");`\r\n",
            " `ArrayList<String> words = {\"Hello\", \"World\"};`\r\n",
            " `ArrayList<String> words = new ArrayList<>(Arrays.asList(\"Hello\", \"World\"));`\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q89. What is the output of this code?",
        "code": "java\r\nclass Main {\r\n  public static void main(String[] args) {\r\n    StringBuilder sb = new StringBuilder(\"hello\");\r\n    sb.deleteCharAt(0).insert(0, \"H\").\" World!\";\r\n    System.out.println(sb);\r\n  }\r\n}\r\n",
        "options": [
            " A runtime exception is thrown.\r\n",
            " \"HelloWorld!\"\r\n",
            " \"hello\"\r\n",
            " ????\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q90. How would you use the TaxCalculator to determine the amount of tax on $50?",
        "code": "java\r\nclass TaxCalculator {\r\n  static calculate(total) {\r\n    return total * .05;\r\n  }\r\n}\r\n",
        "options": [
            " TaxCalculator.calculate(50);\r\n",
            " new TaxCalculator.calculate(50);\r\n",
            " calculate(50);\r\n",
            " new TaxCalculator.calculate($50);\r\n\r\n**Note:** This code won't compile, broken code sample\r\n\r\n- "
        ],
        "correctAns": 1
    },
    {
        "query": " Q93. What is the output of this code?",
        "code": "java\r\n public class Main {\r\n    public static void main(String[] args) {\r\n      HashMap<String, Integer> pantry = new HashMap<>();\r\n\r\n      pantry.put(\"Apples\", 3);\r\n      pantry.put(\"Oranges\", 2);\r\n\r\n      int currentApples = pantry.get(\"Apples\");\r\n      pantry.put(\"Apples\", currentApples + 4);\r\n\r\n      System.out.println(pantry.get(\"Apples\"));\r\n    }\r\n}\r\n",
        "options": [
            " 3\r\n",
            " 4\r\n",
            " 6\r\n",
            " 7\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q94. Which characteristic does not apply to instances of java.util.HashSet=",
        "options": [
            " uses hashcode of objects when inserted\r\n",
            " contains unordred elements\r\n",
            " contains unique elements\r\n",
            " contains sorted elements\r\n\r\n**Explanation**: HashSet makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q95. What is the output?",
        "code": "java\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tPriorityQueue<Integer> queue = new PriorityQueue<>();\r\n\t\tqueue.add(4);\r\n\t\tqueue.add(3);\r\n\t\tqueue.add(2);\r\n\t\tqueue.add(1);\r\n\r\n\t\twhile (queue.isEmpty() == false) {\r\n\t\t\tSystem.out.printf(\"%d\", queue.remove());\r\n\t\t}\r\n\t}\r\n}\r\n",
        "options": [
            " 1 3 2 4\r\n",
            " 4 2 3 1\r\n",
            " 1 2 3 4\r\n",
            " 4 3 2 1\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q96. What will this code print, assuming it is inside the main method of a class?",
        "options": [
            " my\r\n",
            " hellomyfriends\r\n",
            " hello\r\n",
            " friends\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q97. You have an instance of type Map<String, Integer> named instruments containing the following key-value pairs: guitar=1200, cello=3000, and drum=2000. If you add the new key-value pair cello=4500 to the Map using the put method, how many elements do you have in the Map when you call instruments.size()?",
        "options": [
            " 2\r\n",
            " When calling the put method, Java will throw an exception\r\n",
            " 4\r\n",
            " 3\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q98. Which class acts as root class for Java Exception hierarchy?",
        "options": [
            " Clonable\r\n",
            " Throwable\r\n",
            " Object\r\n",
            " Serializable\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q100. Which class does not implement the java.util.Collection interface?",
        "options": [
            " java.util.Vector\r\n",
            " java.util.ArrayList\r\n",
            " java.util.HashSet\r\n",
            " java.util.HashMap\r\n\r\n**Explanation**: HashMap class implements Map interface.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q101. You have a variable of named `employees` of type `List<Employee>` containing multiple entries. The `Employee` type has a method `getName()` that returns te employee name. Which statement properly extracts a list of employee names?",
        "options": [
            " `employees.collect(employee -> employee.getName());`\r\n",
            " `employees.filter(Employee::getName).collect(Collectors.toUnmodifiableList());`\r\n",
            " `employees.stream().map(Employee::getName).collect(Collectors.toList());`\r\n",
            " `employees.stream().collect((e) -> e.getName());`\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q102. What is the correct return type for the `processFunction` method:",
        "code": "\r\n____ processFunction(Integer number, Function<Integer, String> lambda) {\r\n    return lambda.apply(number);\r\n}\r\n",
        "options": [
            " Function<Integer, String>\r\n",
            " Integer\r\n",
            " String\r\n",
            " Consumer\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q103. This code does not compile. What needs to be changed so that it does?",
        "code": "\r\npublic enum Direction {\r\n    EAST(\"E\"),\r\n    WEST(\"W\"),\r\n    NORTH(\"N\"),\r\n    SOUTH(\"S\");\r\n\r\n    private final String shortCode;\r\n\r\n    public String getShortCode() {\r\n        return shortCode;\r\n    }\r\n}\r\n",
        "options": [
            " Add a constructor that accepts a `String` parameter and assigns it to the field `shortCode`.\r\n",
            " Remove the `final` keyword for the field `shortCode`.\r\n",
            " All enums need to be defined on a single line of code.\r\n",
            " Add a setter method for the field `shortCode`.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q104. Which language feature ensures that objects implementing the `AutoCloseable` interface are closed when it completes?",
        "options": [
            " try-catch-finally\r\n",
            " try-finally-close\r\n",
            " try-with-resources\r\n",
            " try-catch-close\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q105. What code should go in line 3?",
        "code": "java\r\nclass Main {\r\n    public static void main(String[] args) {\r\n\r\n        array[0] = new int[]{1, 2, 3};\r\n        array[1] = new int[]{4, 5, 6};\r\n        array[2] = new int[]{7, 8, 9};\r\n        for (int i = 0; i < 3; i++)\r\n            System.out.print(array[i][1]); //prints 258\r\n    }\r\n}\r\n",
        "options": [
            " `int[][] array = new int[][];`\r\n",
            " `int[][] array = new int[3][3];`\r\n",
            " `int[][] array = new int[2][2];`\r\n",
            " `int[][] array = [][];`\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q106. Is this an example of method overloading or overriding?",
        "code": "java\r\nclass Car {\r\n    public void accelerate() {}\r\n}\r\nclass Lambo extends Car {\r\n    public void accelerate(int speedLimit) {}\r\n    public void accelerate() {}\r\n}\r\n",
        "options": [
            " neither\r\n",
            " both\r\n",
            " overloading\r\n",
            " overriding\r\n"
        ],
        "correctAns": 2
    }
]