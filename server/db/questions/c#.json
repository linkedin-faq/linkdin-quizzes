[
    {
        "query": " Q1. In which of these situations are interfaces better than abstract classes?",
        "options": [
            " When you need to define an object type's characteristics, use an interface. When you need to define an object type's capabilities, use an abstract class.\r\n",
            " Interfaces are a legacy of older versions of C#, and are interchangeable with the newer abstract class feature.\r\n",
            " When you need a list of capabilities and data that are classes-agnostic, use an interface. When you need a certain object type to share characteristics, use an abstract class.\r\n",
            " You should use both an interface and an abstract class when defining any complex object.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q2. Which statement is true of delegates?",
        "options": [
            " Delegates are not supported in the current version of C#\r\n",
            " They cannot be used as callbacks.\r\n",
            " Only variables can be passed to delegates as parameters.\r\n",
            " They can be chained together.\r\n\r\n**Reference** [Official documentation: Delegates](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/#delegates-overview)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q3. Which choice best defines C",
        "options": [
            " reactive\r\n",
            " inherited callback\r\n",
            " task-based\r\n",
            " callback-based\r\n\r\n**Reference** [Official documentation: Task asynchronous programming model](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q4. How would you determine if a class has a particular attribute?",
        "code": null,
        "options": [
            " .\r\n\r\n```cs\r\nvar type = typeof(SomeType);\r\nvar attribute = type.GetCustomAttribute<SomeAttribute>();\r\n```\r\n\r\n",
            " .\r\n\r\n```cs\r\nvar typeof(MyPresentationModel).Should().BeDecoratedWith<SomeAttribute>();\r\n```\r\n\r\n",
            " .\r\n\r\n```cs\r\nAttribute.GetCustomAttribute, typeof(SubControllerActionToViewDataAttribute)\r\n```\r\n\r\n",
            " .\r\n\r\n```cs\r\nAttribute.GetCustomAttribute(typeof(ExampleController), typeof(SubControllerActionToViewDataAttribute))\r\n```\r\n\r\n**Reference** [Official documentation: Attribute Class](https://docs.microsoft.com/en-us/dotnet/api/system.attribute?view=net-5.0)\r\n\r\n**Reference** [Official documentation: Attribute.GetCustomAttribute Method](https://docs.microsoft.com/en-us/dotnet/api/system.attribute.getcustomattribute?view=net-5.0)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q5. What is the difference between the ref and out keywords?",
        "options": [
            " Variables passed to out specify that the parameter is an output parameter, while ref specifies that a variable may be passed to a function without being initialized.\r\n",
            " Variables passed to ref can be passed to a function without being initialized, while out specifies that the value is a reference value that can be changed inside the calling method.\r\n",
            " Variables passed to out can be passed to a function without being initialized, while ref specifies that the value is a reference value that can be changed inside the calling method.\r\n",
            " Variables passed to ref specify that the parameter is an output parameter, while out specifies that a variable may be passed to a function without being initialized.\r\n\r\n**Reference** [Official documentation: ref](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref)\r\n\r\n**Reference** [Official documentation: out parameter modifier](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q6. How could you retrieve information about a class, as well as create an instance at runtime?",
        "options": [
            " reflection\r\n",
            " serialization\r\n",
            " abstraction\r\n",
            " dependency injection\r\n\r\n**Reference** [Official documentation: Reflection ](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q7. What is this code an example of?",
        "code": "cs\r\n    private static object objA;\r\n    private static object objB;\r\n\r\n    private static void performTaskA()\r\n    {\r\n        lock (objB)\r\n        {\r\n            Thread.Sleep(1000);\r\n            lock (objA) { }\r\n        }\r\n    }\r\n\r\n    private static void PerformTaskB()\r\n    {\r\n        lock (objA)\r\n        {\r\n            lock (objB) { }\r\n        }\r\n    }\r\n",
        "options": [
            " a private class that uses multithreading\r\n",
            " multithread coding\r\n",
            " thread mismanagement\r\n",
            " a potential deadlock\r\n\r\n**Reference** [Official documentation: Deadlocks and race conditions](https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#deadlocks-and-race-conditions)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q8. What is the difference between an anonymous type and a regular data type?",
        "options": [
            " Anonymous types don't have type names\r\n",
            " Anonymous types can only be static\r\n",
            " Anonymous types can be used only in struts\r\n",
            " Anonymous types don't work with LINQ.\r\n\r\n**Reference** [Official documentation: Anonymous Types](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q9. When would you use a Dictionary rather that an Array type in your application?",
        "options": [
            " when you need a jagged collection structure\r\n",
            " when you need to store values of the same type\r\n",
            " when you need to store key-value pairs rather than single values\r\n",
            " when you need an ordered, searchable list\r\n\r\n**Reference** [Official documentation: Dictionary<TKey,TValue> Class](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?view=net-5.0)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q10. What is the difference between a.Equals(b) and a == b?",
        "options": [
            " The .Equals method compares reference identities while the == compares contents.\r\n",
            " The .Equals method compares primitive values while == compares all values.\r\n",
            " The .Equals method compares contents while == compares references reference identity.\r\n",
            " The .Equals method compares reference type while == compares primitive value types.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q11. Which choice best describes a deadlock situation?",
        "options": [
            " when you try to instantiate two objects at the same time in the same class or struct\r\n",
            " when you are trying to execute an action after a user event is registered\r\n",
            " when simultaneous instructions are waiting on each other to finish before executing\r\n",
            " when you try to execute a series of events simultaneously on multiple threads\r\n\r\n**Reference** [Official documentation: Deadlocks and race conditions](https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#deadlocks-and-race-conditions)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q12. How does the async keyword work?",
        "options": [
            " It allows access to asynchronous methods in the C# API\r\n",
            " It allows thread pooling and synchronous processes in static classes.\r\n",
            " It allows the await keyword to be used in a method\r\n",
            " It allows access to synchronous methods in the C# API\r\n\r\n**Reference** [Official documentation: async](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/async)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q13. What is an object in C",
        "options": [
            " a class or struct, including its variables and functions\r\n",
            " a primitive data type that can be created only at compile time\r\n",
            " a value type that can be used only with an abstract class\r\n",
            " an instance of a class or struct that includes fields, properties, and/or methods\r\n\r\n**Reference** [Official documentation: Objects](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/objects)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q14. Which code snippet declares an anonymous type named userData?",
        "options": [
            " `var<<!---->T> userData = new <<!---->T> { name = \"John\", age = 32 };`\r\n",
            " `var userData = new { name = \"John\", age = 32 };`\r\n",
            " `AType userData = new AType { name = \"John\", age = 32 };`\r\n",
            " `Anonymous<T> userData = new Anonymous<T> { name = \"John\", age = 32 };`\r\n\r\n**Reference** [Official documentation: Anonymous Types](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types)\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q15. What will be returned when this method is executed?",
        "options": [
            " nothing\r\n",
            " a Boolean\r\n",
            " a string variable\r\n",
            " an integer\r\n\r\n**Reference** [Official documentation: void](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/void)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q16. In what order would the employee names in this example be printed to the console?",
        "code": "cs\r\nstring[] employees = { \"Joe\", \"Bob\", \"Carol\", \"Alice\", \"Will\" };\r\n\r\nIEnumerable<string> employeeQuery = from person in employees\r\n                                    orderby person\r\n                                    select person;\r\n\r\nforeach(string employee in employeeQuery)\r\n{\r\n    Console.WriteLine(employee);\r\n}\r\n",
        "options": [
            " ascending\r\n",
            " unordered\r\n",
            " descending\r\n",
            " first in, first out\r\n\r\n**Reference** [dotnetpattern: LINQ OrderBy Operator](http://dotnetpattern.com/linq-orderby-operator)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q17. Lambda expressions are often used in tandem with which of the following?",
        "options": [
            " Namespaces\r\n",
            " LINQ\r\n",
            " Type Aliasing\r\n",
            " Assemblies\r\n\r\n**Reference** [Official documentation: Language Integrated Query (LINQ) Overview](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/)\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q18. What is the correct formatting for single line and multiline comments?",
        "options": [
            " /_/ - Single Line\r\n      /_ - Multiline\r\n",
            " // Multiline\r\n      /_ Single Line _/\r\n",
            " //\\* Multiline\r\n      / Single Line\r\n",
            " // Single Line\r\n      /_ Multiline _/\r\n\r\n**Reference** [w3schools: C# Comments](https://www.w3schools.com/cs/cs_comments.php)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q19. How do you make a method in an abstract class overridable?",
        "options": [
            " Make it public\r\n",
            " Make it static\r\n",
            " Make it private\r\n",
            " Make it virtual\r\n\r\n**Reference** [Official documentation: virtual](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/virtual)\r\n\r\n**Reference** [Official documentation: abstract](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q20. How would you write code for an integer property called Age with a getter and setter?",
        "options": [
            " public int Age { get - set }\r\n",
            " public int Age: get set;\r\n",
            " public int Age (get, set );\r\n",
            " public int Age { get; set; }\r\n\r\n**Reference** [Official documentation: Using Properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q21. What is an abstract class?",
        "options": [
            " a class that is denoted by the class keyword (can be seen and used by any other class in the system--thus it is by default public)\r\n",
            " something denoted by the abstract keyword and used system wide; if you want any program to create an object of a class you use the abstract class\r\n",
            " a class that is denoted by the virtual keyword\r\n",
            " a class that can be used only as base class\r\n\r\n**Reference** [Official documentation: Abstract and Sealed Classes and Class Members](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q22. When using a thread pool what happens to a given thread after it finishes its task?",
        "options": [
            " The thread is destroyed and memory is freed up.\r\n",
            " The thread runs in loop until the next assignment.\r\n",
            " The thread goes inactive in the background and waits for garbage collection.\r\n",
            " The thread returns to the pool for reuse.\r\n\r\n**Reference** [Official documentation: Thread pool characteristics](https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool#thread-pool-characteristics)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q23. Which choice represents a class that inherits behavior from a base class?",
        "options": [
            " a second base class\r\n",
            " a revised class\r\n",
            " a derived class\r\n",
            " a parent class\r\n\r\n**Reference** [Official documentation: Inheritance](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/inheritance)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q24. What does operator overloading allow you to do?",
        "options": [
            " hide built-in operatores when necessary\r\n",
            " add methods to be interpreted by the compiler at runtime\r\n",
            " define how enums and other primitive value types work within the rest of the application\r\n",
            " define custom functionality for common operators like addition and equality\r\n\r\n**Reference** [Official documentation: Operator overloading](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/operator-overloading)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q25. What it the main purpose of LINQ?",
        "options": [
            " to delete duplicate data\r\n",
            " to bind namespaces and assemblies\r\n",
            " to query and transform data\r\n",
            " to connect assemblies\r\n\r\n**Reference** [Official documentation: Language Integrated Query (LINQ) Overview](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/#query-expression-overview)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q26. What is the correct syntax for a new generic list of strings named contacts?",
        "options": [
            " public List<string names> contacts = new List<string names>();\r\n",
            " public List(string names) contacts = new List(string names)();\r\n",
            " var contacts = new List<string>();\r\n",
            " var contacts = new List(string);\r\n\r\n**Reference** [Official documentation: List<T> Class](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-5.0)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q27. What is the difference between throw exceptions and throw clauses?",
        "options": [
            " Throw clauses fire only at runtime, while throw exceptions can fire at any time.\r\n",
            " Throw exceptions overwrite the stack trace, while throw clauses retain the stack information.\r\n",
            " Throw clauses overwrite the stack trace, while throw exceptions retain the stack information.\r\n",
            " Throw exceptions fire only at runtime, while throw clauses can fire during compile time.\r\n\r\n**Reference** [Official documentation: throw](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/throw)\r\n\r\n**Reference** [c-sharpcorner: Difference Between Throw Exception and Throw Clause](https://www.c-sharpcorner.com/UploadFile/akkiraju/difference-between-throw-exception-and-throw-clause/)\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q28. When an asynchronous method is executed, the code runs but nothing happens other than a compiler warning. What is most likely causing the method to not return anything?",
        "options": [
            " The return yield statement is missing at the end of the method.\r\n",
            " The method is missing an await keyword in its body.\r\n",
            " The wait keyword is missing from the end of the method.\r\n",
            " The yield keyword is missing from the method.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q29. What are C",
        "options": [
            " system actions that communicate directly with the compiler at runtime\r\n",
            " actions that execute when the code compiles, generating logs and test output\r\n",
            " actions that generate notifications, which are sent to their registered listeners\r\n",
            " user-only methods that send data to the application's back end\r\n\r\n**Reference** [Official documentation: Introduction to events](https://docs.microsoft.com/en-us/dotnet/csharp/events-overview)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q30. What kind of values can arrays store?",
        "options": [
            " unordered collections of numerc values\r\n",
            " key-value pairs of any C# supported type\r\n",
            " class and struct instances\r\n",
            " multiple variables, or collections, of the same type\r\n\r\n**Reference** [Official documentation: Arrays](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q31. Given this enumeration, how would you access the integer-type value of 'AppState.Loading'?",
        "options": [
            " string currentState = (string)AppState.Loading;\r\n",
            " string currentState = AppState.Loading.integralVal;\r\n",
            " int currentState = AppState.Loading.rawValue;\r\n",
            " int currentState = (int)AppState.Loading;\r\n\r\n**Reference** [Official documentation: Enumeration types](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum#conversions)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q32. What character would you use to start a regular expression pattern at a word boundary?",
        "options": [
            " d\r\n",
            " \\a\r\n",
            " \\b\r\n",
            " \\w\r\n\r\n**Reference** [regular-expressions: Word Boundaries](https://www.regular-expressions.info/wordboundaries.html)\r\n\r\n**Reference** [Official documentation: Regular Expression Language - Quick Reference](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q33. To conform to the following interface, which of its members need to be implemented?",
        "code": "cs\r\npublic interface INameble\r\n{\r\n    string FirstName { get; set; }\r\n    string LastName { get; }\r\n}\r\n",
        "options": [
            " Both the FirstName and LastName properties need to be implemented.\r\n",
            " Neither, they are both optional.\r\n",
            " Only the LastName property needs to be implemented.\r\n",
            " Only the FirstName property needs to be implemented.\r\n\r\n**Reference** [Official documentation: interface](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q34. You're dealing with multiple assemblies in your program, but are worried about memory allocation. At what point in the program life cycle are assemblies loaded into memory?",
        "options": [
            " at runtime\r\n",
            " at compile time\r\n",
            " only when required\r\n",
            " only when programmatically loaded\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q35. What is most accurate description of a regular expression?",
        "options": [
            " A regular expression is a C# tool used to parse HTML\r\n",
            " A regular expression is a special text string for describing a search patters.\r\n",
            " A regular expression allows a variable to be passed by reference.\r\n",
            " A regular expression allows a class to conform to the Equatable protocol.\r\n\r\n**Reference** [Official documentation: Regular Expression Language - Quick Reference](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference)\r\n\r\n**Reference** [Official documentation: .NET regular expressions](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions)\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q36. Why would you use a class field in C",
        "options": [
            " To define behaviours of the class\r\n",
            " To hold information and data contained in the class object\r\n",
            " To communicate between classes and object\r\n",
            " To store the class definition value\r\n\r\n**Reference** [Official documentation: Introduction to classes](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/classes)\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q37. When would you use generics in your code?",
        "options": [
            " to increase code performance\r\n",
            " all of these answers\r\n",
            " when code reuse is a priority\r\n",
            " when type safety is important\r\n\r\n**Reference** [Official documentation: Generic classes and methods](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/generics)\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q38. What prints to the console when this code is executed?",
        "code": "cs\r\npublic delegate void AuthCallback(bool validUser);\r\npublic static AuthCallback loginCallback = Login;\r\npublic static void Login()\r\n{\r\n    Console.WriteLine(\"Valid user!\");\r\n}\r\n\r\npublic static void Main(string[] args)\r\n{\r\n    loginCallback(true);\r\n}\r\n",
        "options": [
            " Login successful...\r\n",
            " Valid user!\r\n",
            " an error, because the method signature of Login doesn't match the delegate\r\n",
            " Login successful... Valid user!\r\n\r\n**Reference** [Official documentation: Introduction to Delegates](https://docs.microsoft.com/en-us/dotnet/csharp/delegates-overview)\r\n\r\n**Reference** [Official documentation: Introduction to Events](https://docs.microsoft.com/en-us/dotnet/csharp/events-overview)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q39. How would you declare a sealed class named User?",
        "options": [
            " public class User\r\n",
            " abstract User {}\r\n",
            " sealed class User\r\n",
            " private sealed class User\r\n\r\n**Reference** [Official documentation: Abstract and Sealed Classes and Class Members](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q40. What is the correct syntax for a new generic list of strings named contacts? (similar to Q26)",
        "options": [
            " `var contacts = new List<string>();`\r\n",
            " `var contacts = new List(string);`\r\n",
            " `public List<string names> contacts = new List<string names>();`\r\n",
            " `public List(string names) contacts = new List(string names);`\r\n\r\n**Reference** [Official documentation: List<T>](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-5.0)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q41. What is the difference between non-static and static classes?",
        "options": [
            " non-static classes need to be initialized before use, while static classes do not\r\n",
            " non-static classes are accessible only from an interface while static classes are accessible from anywhere\r\n",
            " non-static classes need to initialize all class members at runtime, while static classes do not\r\n",
            " non-static classes do not need to be initialized while static classes do\r\n\r\n**Reference** [stackoverflow](https://stackoverflow.com/questions/20451554/whats-the-function-of-a-static-constructor-in-a-non-static-class)\r\n\r\n**Reference** [Official documentation: Static Constructors](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-constructors)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q42. Which characteristic prevents this code from compiling?",
        "options": [
            " type safety\r\n",
            " single inheritance\r\n",
            " dependency injection\r\n",
            " multiple inheritance\r\n\r\n**Reference** [c-sharpcorner: Type Safety in .NET](https://www.c-sharpcorner.com/UploadFile/vikie4u/type-safety-in-net/)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q43. How would you serialize this class?",
        "options": [
            " Mark the User class with the `DeserializableAttribute`.\r\n",
            " Declare the class as `public serializable class User {}`.\r\n",
            " Mark the User class with the `SerializableAttribute` attribute.\r\n",
            " Declare the class as `private serializable class User {}`.\r\n\r\n**Reference** [Official documentation: SerializableAttribute Class](https://docs.microsoft.com/en-us/dotnet/api/system.serializableattribute?view=net-5.0)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q44. How would you write a delegate named ResultCallback with an int parameter named responseCode",
        "options": [
            " public delegate ResultCallback(int responseCode)\r\n",
            " public delegate void ResultCallback<(int) responseCode>;\r\n",
            " public void delegate ResultCallback<int responseCode>;\r\n",
            " public delegate void ResultCallback(int responseCode);\r\n\r\n**Reference** [Official documentation: Delegates](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q45. What is the difference between a static and non-static method?",
        "options": [
            " non-static methods always need to have a void return type\r\n",
            " non-static methods do not have access to static member variables\r\n",
            " static methods do not have to instantiate an instance of the class to call the method\r\n",
            " static methods always have to be public\r\n\r\n**Reference** [Official documentation: Static Members](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members#static-members)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q46. What is the correct way to write an event named apiResult based on a delegate named ResultCallback?",
        "options": [
            " public void event ResultCallback apiResult;\r\n",
            " public event ResultCallback(() -> apiResult);\r\n",
            " public event void ResultCallback\r\n",
            " public event ResultCallback apiResult;\r\n\r\n**Reference** [Official documentation: Introduction to events](https://docs.microsoft.com/en-us/dotnet/csharp/events-overview)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q47. When will the code inside finally block be executed in a try-catch statement?",
        "options": [
            " if there is an error, it won't execute at all\r\n",
            " between the try and catch blocks\r\n",
            " after the try and catch blocks\r\n",
            " when the finally block overrides the catch block and executes in its place\r\n\r\n**Reference** [Official documentation: try-catch](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/try-catch)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q48. What method correctly extends the string class?",
        "options": [
            " public static string IsvalidName(this string i, string value) {}\r\n",
            " public static void IsvalidName(this string i, string value) {}\r\n",
            " public string IsvalidName(this string i, string value) {}\r\n",
            " public void IsvalidName(this string i, string value) {}\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q49. How are C",
        "options": [
            " They do not support multiple inheritance.\r\n",
            " They support multiple inheritance.\r\n",
            " They can have only a set number of properties.\r\n",
            " They can have only a set number of methods.\r\n\r\n**Reference** [Official documentation: Class inheritance](https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/classes#class-inheritance)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q50. What function do namespaces perform?",
        "options": [
            " Namespaces calculate code coverage at runtime.\r\n",
            " Namespaces compile application code together at compile time.\r\n",
            " Namespaces group code together into a single repository.\r\n",
            " Namespaces separate code into groupings, control access, and void naming collisions.\r\n\r\n**Reference** [Official documentation: namespace](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/namespace)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q51. What is the correct way to write a public property with a private backing field?",
        "code": null,
        "options": [
            "\r\n\r\n```cs\r\nprivate int _password;\r\npubic int Password = { get; set; }\r\n```\r\n\r\n",
            "\r\n\r\n```cs\r\nprivate int _password;\r\npublic int Password = _password;\r\n```\r\n\r\n",
            "\r\n\r\n```cs\r\nprivate int _password;\r\npublic int Password\r\n{\r\n  get -> _password;\r\n  set-> _password = value;\r\n}\r\n```\r\n\r\n",
            "\r\n\r\n```cs\r\nprivate int _password;\r\npublic int Password\r\n{\r\n  get { return _password; }\r\n  set { _password = value; }\r\n}\r\n```\r\n\r\n**Reference** [Official documentation: Using Properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q52. What is a thread pool?",
        "options": [
            " a collection of synchronous methods created during initialization that cannot be reused\r\n",
            " a collection of threads created during initialization that can be reused\r\n",
            " a collection of threads only recognized at compile time that can be reused\r\n",
            " a collection of asynchronous methods created at compile time that cannot be reused\r\n\r\n**Reference** [Official documentation: ThreadPool Class](https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool?view=net-5.0)\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q53. What is the most accurate description of a regular expression?",
        "options": [
            " A regular expressions allows a variable to be passed by reference\r\n",
            " A regular expression allows a class to conform to the Equatable protocol\r\n",
            " A regular expression is a C# tool used to parse HTML\r\n",
            " A regular expression is a special text string for describing a search pattern\r\n\r\n**Reference** [Official documentation: Regular Expression Language - Quick Reference](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q54. When an object in C",
        "options": [
            " XML\r\n",
            " JSON\r\n",
            " byte stream\r\n",
            " value stream\r\n\r\n**Reference:** [Official documentation: Serialization](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/serialization/)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q55. What is a delegate",
        "options": [
            " a variable that holds a reference to a value type and its content\r\n",
            " a specific value type that can be used only in callback methods\r\n",
            " a type that holds a reference to a method with a particular parameter list and return type\r\n",
            " a custom variable type that can be used in abstract classes\r\n\r\n**Reference:** [Official documentation: Delegates](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/delegates/)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q56. What are the four keywords associated with exception handling in C",
        "options": [
            " try, catch, valid, invalid\r\n",
            " try, valid, finally, throw\r\n",
            " try, catch, finally, throw\r\n",
            " finally, throw, valid, invalid\r\n\r\n**Reference:** [Tutorial Point](https://www.tutorialspoint.com/csharp/csharp_exception_handling.htm#:~:text=Exceptions%20provide%20a%20way%20to,catch%2C%20finally%2C%20and%20throw.)\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q57. What is the main difference between the is and as operators?",
        "options": [
            " The is operator checks instance types, while the as operator checks the inherited type.\r\n",
            " The is operator checks primitive data types, while the as operator checks the object type.\r\n",
            " The as operator checks object type, while the is operator attempts to cast an object to a specific type.\r\n",
            " The is operator checks object type, while the as operator attempts to cast an object to a specific type.\r\n\r\n**Reference:** [Pluralsight guide](https://www.pluralsight.com/guides/csharp-is-as-operators-is-expressions)\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q58. What is the difference between finally and finalize blocks?",
        "options": [
            " The finally block is called during the execution of a try and catch block, while the finalize method is called after garbage collection.\r\n",
            " The finally block is called after the execution of a try and catch block, while the finalize method is called just before garbage collection.\r\n",
            " The finalize block is called before the execution of a try and catch block, while the finally method is called just before garbage collection.\r\n",
            " The finalize block is called during the execution of a try and catch block, while the finally method is called after garbage collection.\r\n\r\n**Reference:** [C-sharpcorner](https://www.c-sharpcorner.com/forums/final-finally-and-finalize)\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q59. Your application has a value type called username that needs to be able to accept null values, but this is generating compile-time errors. How would you fix this in code?",
        "options": [
            " Null<string> username = null;\r\n",
            " string? username = null;\r\n",
            " Type<string>? username = null;\r\n",
            " Optional<string> username = null;\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q60. Which code snippet correctly declares a custom exception named InvalidResponse?",
        "options": [
            " struct InvalidResponse: Exception {}\r\n",
            " class InvalidResponse: Exception {}\r\n",
            " public Exception InvalidResponse = new Exception ();\r\n",
            " public Exception InvalidResponse () -> Exception;\r\n\r\n**Reference:** [Official documentation: Exceptions](https://docs.microsoft.com/en-us/dotnet/standard/exceptions/how-to-create-user-defined-exceptions)\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q61. How would you write an enum variable called AppState with values for Offline, Loading, and Ready?",
        "options": [
            " enum AppState = [Offline, Loading, Ready]\r\n",
            " enum AppState {\"Offline\", \"Loading\", \"Ready\"}\r\n",
            " enum AppState = {Offline, Loading, Ready}\r\n",
            " enum AppState {Offline, Loading, Ready}\r\n\r\n  **Reference:** [Official documentation: Enum](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/enum)\r\n"
        ],
        "correctAns": 4
    }
]