[
    {
        "query": " Q1. What is this code an example of?",
        "code": "swift\r\nlet val = (Double)6\r\n",
        "options": [
            " a syntax issue\r\n",
            " typecasting\r\n",
            " assignment\r\n",
            " initialization\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q2. What is the error in this code?",
        "code": "swift\r\nlet x = 5\r\nguard x == 5 { return }\r\n",
        "options": [
            " The guard is missing the else.\r\n",
            " Nothing is wrong.\r\n",
            " The guard is missing a then.\r\n",
            " The comparison is wrong.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q3. What is the raw/underlying type of this enum?",
        "code": "swift\r\nenum Direction {\r\n  case north, south, east, west\r\n}\r\n",
        "options": [
            " There is none.\r\n",
            " String\r\n",
            " Any\r\n",
            " Int\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q4. Why is dispatchGroup used in certain situations?",
        "options": [
            " It allows multiple synchronous or asynchronous operations to run on different queues.\r\n",
            " It allows track and control execution of multiple operations together.\r\n",
            " It allows operations to wait for each other as desired.\r\n",
            " all of these answers.\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q5. What is this code an example of?",
        "code": "swift\r\nlet val = 5\r\nprint(\"value is: \\(val)\")\r\n",
        "options": [
            " string interpolation\r\n",
            " string compilation\r\n",
            " method chaining\r\n",
            " string concatenation\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q6. What are the contents of `vals` after this code is executed?",
        "code": "swift\r\nvar vals = [10, 2]\r\nvals.sort { (s1, s2) -> Bool in\r\n  s1 > s2\r\n}\r\n",
        "options": [
            " [10, 2]\r\n",
            " [2, 10]\r\n",
            " nil\r\n",
            " This code contains an error\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q7. What does this code print?",
        "code": "swift\r\ntypealias Thing = [String:Any]\r\nvar stuff: Thing\r\nprint(type(of: stuff))\r\n",
        "options": [
            " Dictionary<String, Any>\r\n",
            " Dictionary\r\n",
            " ERROR\r\n",
            " Thing\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q8. What is the value of y?",
        "code": "swift\r\nlet x = [\"1\", \"2\"].dropFirst()\r\nlet y = x[0]\r\n",
        "options": [
            " This code contains an error\r\n",
            " 1\r\n",
            " 2\r\n",
            " nil\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q9. What is the value of test in this code?",
        "code": "swift\r\nvar test = 1 == 1\r\n",
        "options": [
            " TRUE\r\n",
            " YES\r\n",
            " 1\r\n",
            " This code contains an error\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q10. What is the value of y?",
        "code": "swift\r\nvar x: Int?\r\nlet y = x ?? 5\r\n",
        "options": [
            " 5\r\n",
            " 0\r\n",
            " nil\r\n",
            " This code contains an error\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q11. What is the type of this function?",
        "code": "swift\r\nfunc add(a: Int, b: Int) -> Int { return a+b }\r\n",
        "options": [
            " Int\r\n",
            " (Int, Int) -> Int\r\n",
            " Int<Optional>\r\n",
            " Functions don't have types.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q12. What is the correct way to call this function?",
        "code": "swift\r\nfunc myFunc(_ a: Int, b: Int) -> Int {\r\n  return a + b\r\n}\r\n",
        "options": [
            " myFunc(5, b: 6)\r\n",
            " myFunc(5, 6)\r\n",
            " myFunc(a: 5, b: 6)\r\n",
            " myFunc(a, b)\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q13. The Codable protocol is **\\_**?",
        "options": [
            " a combination of Encodable and Decodable\r\n",
            " not a true protocol <<<<---Possibly correct as it's a typealias of Encodable and Decodable\r\n",
            " required of all classes\r\n",
            " automatically included in all classes\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q14. What is the type of value1 in this code?",
        "code": "swift\r\nlet value1 = \"\\(\"test\".count)\"\r\n",
        "options": [
            " String\r\n",
            " Int\r\n",
            " null\r\n",
            " test.count\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q15. When a function takes a closure as a parameter, when do you want to mark is as escaping?",
        "options": [
            " when it's executed after the function returns\r\n",
            " when it's scope is undefined\r\n",
            " when is's lazy loaded\r\n",
            " all of these answers\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q16. What's wrong with this code?",
        "code": "swift\r\nclass Person {\r\n  var name: String\r\n  var address: String\r\n}\r\n",
        "options": [
            " Person has no initializers.\r\n",
            " Person has no base class.\r\n",
            " var name is not formatted corrrectly.\r\n",
            " address is a keyword.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q17. What is the value of names after this code is executed?",
        "code": "swift\r\nlet names = [\"Bear\", \"Joe\", \"Clark\"]\r\nnames.map { (s) -> String in\r\n  return s.uppercased()\r\n}\r\n",
        "options": [
            " [\"BEAR\", \"JOE\", \"CLARK\"]\r\n",
            " [\"B\", \"J\", \"C\"]\r\n",
            " [\"Bear\", \"Joe\", \"Clark\"]\r\n",
            " This code contains an error.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q18. What describes this line of code?",
        "code": "swift\r\nlet val = 5\r\n",
        "options": [
            " a constant named val of type Int\r\n",
            " a variable named val of type item\r\n",
            " a constant named val of type Number\r\n",
            " a variable named val of type Int\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q19. What is the error in this code?",
        "code": "swift\r\nextension String {\r\n  var firstLetter: Character = \"c\" {\r\n    didSet {\r\n      print(\"new value\")\r\n    }\r\n  }\r\n}\r\n",
        "options": [
            " Extensions can't add properties. // although extensions technically can't contain stored properties\r\n",
            " Nothing is wrong with it.\r\n",
            " didSet takes a parameter.\r\n",
            " c is not a character.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q20. didSet and willSet are examples of **\\_**?",
        "options": [
            " property observers\r\n",
            " key properties\r\n",
            " all of these answers\r\n",
            " newOld value calls\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q21. What is wrong with this code?",
        "code": "swift\r\nself.callback = {\r\n  self.attempts += 1\r\n  self.downloadFailed()\r\n}\r\n",
        "options": [
            " Use of self inside the closure causes retain cycle.\r\n",
            " You cannot assign a value to closure in this manner.\r\n",
            " You need to define the type of closure explicitly.\r\n",
            " There is nothing wrong with this code.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q22. How many values does vals have after this code is executed?",
        "code": "swift\r\nvar vals = Set<String> = [\"4\", \"5\", \"6\"]\r\nvals.insert(\"5\")\r\n",
        "options": [
            " three\r\n",
            " four\r\n",
            " eight\r\n",
            " This code contains an error.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q23. How can you avoid a strong reference cycle in a closure?",
        "options": [
            " Use a capture list to set class instances of weak or unowned.\r\n",
            " You can't, there will always be a danger of strong reference cycles inside a closure.\r\n",
            " Initialize the closure as read-only.\r\n",
            " Declare the closure variable as lazy.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q24. What is wrong with this code?",
        "code": "swift\r\nif let s = String.init(\"some string\") {\r\n  print(s)\r\n}\r\n",
        "options": [
            " This String initializer does not return an optional.\r\n",
            " String does not have an initializer that can take a String.\r\n",
            " = is not a comparison.\r\n",
            " Nothing is wrong with this code.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q25. Which code snippet correctly creates a typealias closure?",
        "options": [
            " typealias CustomClosure: () -> ()\r\n",
            " typealias CustomClosure { () -> () }\r\n",
            " typealias CustomClosure -> () -> ()\r\n",
            " typealias CustomClosure -> () {}\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q26. How do you reference class members from within a class?",
        "options": [
            " self\r\n",
            " instance\r\n",
            " class\r\n",
            " this\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q27. All value types in Swift are **\\_** under the hood?",
        "options": [
            " structs\r\n",
            " classes\r\n",
            " optionals\r\n",
            " generics\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q28. What is the correct way to add a value to this array?",
        "code": "swift\r\nvar strings = [1, 2, 3]\r\n",
        "options": [
            " all of these answers\r\n",
            " strings.append(4)\r\n",
            " strings.insert(5, at: 1)\r\n",
            " strings += [5]\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q29. How many times will this loop be executed?",
        "code": "swift\r\nfor i in 0...100 {\r\n  print(i)\r\n}\r\n",
        "options": [
            " 0\r\n",
            " 101\r\n",
            " 99\r\n",
            " 100\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q30. What can AnyObject represent?",
        "options": [
            " an instance of any class\r\n",
            " an instance of function type\r\n",
            " all of these answers\r\n",
            " an instance of an optional type\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q31. What does this code print?",
        "code": "swift\r\ntypealias Thing = [String:Any]\r\nvar stuff : Thing\r\nprint(type(of:stuff))\r\n",
        "options": [
            " Dictionary\r\n",
            " ERROR\r\n",
            " Thing\r\n",
            " Dictionary<String, Any>\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q32. What is the value of t after this code is executed?",
        "code": "swift\r\nlet names = [\"Larry\", \"Sven\", \"Bear\"]\r\nlet t = names.enumerated().first().offset\r\n",
        "options": [
            " This code is invalid.\r\n",
            " This code does not compile.\r\n",
            " 0\r\n",
            " 1\r\n",
            " Larry\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q32. What is the value of test after this code executes?",
        "code": "swift\r\nlet vt = (name: \"ABC\", val: 5)\r\nlet test = vt.0\r\n",
        "options": [
            " ABC\r\n",
            " 0\r\n",
            " 5\r\n",
            " name\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q33. What is the base class in this code?",
        "code": "swift\r\nclass LSN : MMM {\r\n}\r\n",
        "options": [
            " MMM\r\n",
            " LSN\r\n",
            " There is no base class.\r\n",
            " This code is invalid.\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q34. What does this code print to the console?",
        "code": "swift\r\nvar userLocation: String = \"Home\" {\r\n  willSet(newValue) {\r\n  print(\"About to set userLocation to \\(newValue)...\")\r\n  }\r\n\r\n  didSet {\r\n  if userLocation != oldValue {\r\n  print(\"userLocation updated with new value!\")\r\n  } else {\r\n  print(\"userLocation already set to that value...\")\r\n  }\r\n  }\r\n }\r\n\r\n userLocation = \"Work\"\r\n",
        "options": [
            " About to set userLocation to Work… userLocation updated with new value!\r\n",
            " About to set userLocation to Work… userLocation already set to that value…\r\n",
            " About to set userLocation to Home… userLocation updated to new value!\r\n",
            " ERROR\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q35. What must a convenience initializer call?",
        "options": [
            " a base class convenience initializer\r\n",
            " either a designated or another convenience initializer\r\n",
            " a designated initializer\r\n",
            " none of these answers\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q36. Which object allows you access to specify that a block of code runs in a background thread?",
        "options": [
            " DispatchQueue.visible\r\n",
            " DispatchQueue.global\r\n",
            " errorExample need to be labeled as `throws`.\r\n",
            " DispatchQueue.background\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q37. What is the inferred type of x?",
        "code": "swift\r\nlet x = [\"a\", \"b\", \"c\"]\r\n",
        "options": [
            " `String[]`\r\n",
            " `Array<String>`\r\n",
            " `Set<String>`\r\n",
            " `Array<Character>`\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q38. What is the value of `oThings` after this code is executed?",
        "code": "swift\r\nlet nThings: [Any] = [1, \"2\", \"three\"]\r\nlet oThings = nThings.reduce(\"\") { \"\\($0)\\($1)\" }\r\n",
        "options": [
            " 11212three\r\n",
            " 115\r\n",
            " 12three\r\n",
            " Nothing, this code is invalid.\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q39. How would you call a function that throws errors and also returns a value?",
        "options": [
            " `!try`\r\n",
            " `try?`\r\n",
            " `try!`\r\n",
            " `?try`\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q40. What is wrong with this code?",
        "code": "swift\r\nprotocol TUI {\r\n  func add(x1 : Int, x2 : Int) -> Int {\r\n    return x1 + x2\r\n  }\r\n}\r\n",
        "options": [
            " Protocol functions cannot have return types.\r\n",
            " Protocol functions cannot have implementations.\r\n",
            " Nothing is wrong with it.\r\n",
            " `add` is a reserved keyword.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q41. In this code, what are `wheels` and `doors` examples of?",
        "code": "swift\r\nclass Car {\r\n  var wheels: Int = 4\r\n  let doors = 4\r\n}\r\n",
        "options": [
            " class members\r\n",
            " This code is invalid.\r\n",
            " class fields\r\n",
            " class properties\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q42. How do you designated a failable initializer?",
        "options": [
            " You cannot\r\n",
            " deinit\r\n",
            " `init?`\r\n",
            " init\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q43. What is printed when this code is executed?",
        "code": "swift\r\nlet dbl = Double.init(\"5a\")\r\nprint(dbl ?? \".asString()\")\r\n",
        "options": [
            " five\r\n",
            " 5a\r\n",
            " `.asString()`\r\n",
            " 5\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q44. In the function below, what are `this` and `toThat` examples of?",
        "code": "swift\r\nfunc add(this x: Int, toThat y: Int)->{}\r\n",
        "options": [
            " none of these answers\r\n",
            " local terms\r\n",
            " argument labels\r\n",
            " parameters names\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q45. What is wrong with this code?",
        "code": "swift\r\nfor (key, value) in [1: \"one\", 2: \"two\"]{\r\n  print(key, value)\r\n}\r\n",
        "options": [
            " The interaction source is invalid\r\n",
            " The interaction variable is invalid\r\n",
            " There is nothing wrong with this code\r\n",
            " The comma in the print is misplaced\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q46. Which of these choices is associated with unit testing?",
        "options": [
            " XCTest\r\n",
            " all of these answers\r\n",
            " @testable\r\n",
            " XCAssert\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q47. In the code below, what is width an example of?",
        "code": "swift\r\nclass Square{\r\n  var height: Int = 0\r\n  var width : Int {\r\n    return height\r\n  }\r\n}\r\n",
        "options": [
            " This code contains error\r\n",
            " a closure\r\n",
            " a computed property\r\n",
            " lazy loading\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q48. What data type is this an example of?",
        "code": "swift\r\nlet vals = (\"val\", 1)\r\n",
        "options": [
            " a dictionary\r\n",
            " a tuple\r\n",
            " an optional\r\n",
            " This code contains error\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q49. What is wrong with this code?",
        "code": "swift\r\nvar x = 5\r\nx = 10.0\r\n",
        "options": [
            " You cannot assign a Double to a variable of type Int\r\n",
            " x is undefined\r\n",
            " x is a constant\r\n",
            " x has no type\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q50. What will this code print to the console?",
        "code": "swift\r\nvar items = [\"a\":1, \"b\":2, \"c\":\"test\"] as [String: Any]\r\nitems[\"c\"] = nil\r\nprint(items[\"c\"] as Any)\r\n",
        "options": [
            " Any\r\n",
            " test\r\n",
            " 1,2,3\r\n",
            " nil\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q51. What is wrong with this code?",
        "code": "swift\r\nlet val = 5.0 + 10\r\n",
        "options": [
            " There is nothing wrong with this code\r\n",
            " val is a constant and cannot be changed\r\n",
            " 5.0 and 10 are different types\r\n",
            " There is no semicolon\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q52. How many parameters does the initializer for Test have?",
        "code": "swift\r\nstruct Test{\r\n  var score: Int\r\n  var date: Date\r\n}\r\n",
        "options": [
            " zero\r\n",
            " This code contains an error\r\n",
            " two\r\n",
            " Structs do not have initializers\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q53. What prints to the console when executing this code?",
        "code": "swift\r\nlet x = try? String.init(\"test\")\r\nprint(x)\r\n",
        "options": [
            " nil\r\n",
            " Nothing - this code contains an error\r\n",
            " Optional(\"test\")\r\n",
            " test\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q54. How can you sort this array?",
        "code": "swift\r\nvar vals = [1,2,3]\r\n",
        "options": [
            " `vals.sort { $0 < $1 }`\r\n",
            " `vals.sort { (s1, s2) in s1 < s2 }`\r\n",
            " `vals.sort(by: <)`\r\n",
            " all of these answers\r\n\r\n"
        ],
        "correctAns": 4
    },
    {
        "query": " Q55. DispatchQueue.main.async takes a block that will be",
        "options": [
            " not executed\r\n",
            " executed in the main queue\r\n",
            " none of these answers\r\n",
            " executed on the background thread\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q56. When is deinit called?",
        "options": [
            " When a class instance needs memory\r\n",
            " All of these answers\r\n",
            " When the executable code is finished\r\n",
            " When a class instance is being removed from memory\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q57. How do you declare an optional String?",
        "options": [
            " String?\r\n",
            " Optional[String]\r\n",
            " [String]?\r\n",
            " ?String\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q58. How many times this code will be executed? —OR— How many times will this loop be performed?",
        "code": "swift\r\nfor i in [\"0\", \"1\"]{\r\n  print(i)\r\n}\r\n",
        "options": [
            " one\r\n",
            " two\r\n",
            " three\r\n",
            " This code does not compile\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q59. What does this code print?",
        "code": "swift\r\nlet names = [\"Bear\", \"Tony\", \"Svante\"]\r\nprint(names[1]+\"Bear\")\r\n",
        "options": [
            " 1Bear\r\n",
            " BearBear\r\n",
            " TonyBear\r\n",
            " Nothing, this code is invalid\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q60. What is true of this code?",
        "code": "swift\r\nlet name: String?\r\n",
        "options": [
            " name can hold only a string value.\r\n",
            " name can hold either a string or nil value.\r\n",
            " Optional values cannot be `let` constants.\r\n",
            " Only non-empty string variables can be stored in name.\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q61. What is the value of `val` after this code is executed?",
        "code": "swift\r\nlet i = 5\r\nlet val = i * 6.0\r\n",
        "options": [
            " This code is invalid.\r\n",
            " 6\r\n",
            " 30\r\n",
            " 0\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q62. What does this code print?",
        "code": "swift\r\nenum Positions : Int {\r\n  case first, second, third, other\r\n}\r\nprint (Positions.other.rawValue)\r\n",
        "options": [
            " 3\r\n",
            " 0\r\n",
            " other\r\n",
            " nil\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q63. What is printed to the console when this code is executed?",
        "code": "swift\r\n\"t\".forEach { (char) in\r\n    print(char)\r\n}\r\n",
        "options": [
            " nil\r\n",
            " Nothing, since the code contains an error\r\n",
            " t\r\n",
            " zero\r\n\r\n"
        ],
        "correctAns": 3
    },
    {
        "query": " Q64. What prints when this code is executed?",
        "code": "swift\r\nlet s1 = [\"1\", \"2\", \"3\"]\r\n    .filter { $0 > \"0\" }\r\n    .sorted { $0 > $1 }\r\nprint(s1)\r\n",
        "options": [
            " []\r\n",
            " [\"3\", \"2\", \"1\"]\r\n",
            " [321]\r\n",
            " [\"1\", \"2\", \"3\"]\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q65. What enumeration feature allows them to store case-specific data?",
        "options": [
            " associated values\r\n",
            " integral values\r\n",
            " raw values\r\n",
            " custom values\r\n\r\n"
        ],
        "correctAns": 1
    },
    {
        "query": " Q66. In the code below, AOM must be a(n)?",
        "code": "swift\r\nclass AmP : MMM, AOM {\r\n  }\r\n",
        "options": [
            " class\r\n",
            " protocol\r\n",
            " enumeration\r\n",
            " struct\r\n\r\n"
        ],
        "correctAns": 2
    },
    {
        "query": " Q67. What is the value of numbers in the code below?",
        "code": "swift\r\nlet numbers = [1,2,3,4,5,6].filter{ $0 % 2 == 0}\r\n",
        "options": [
            " [1,3,5]\r\n",
            " []\r\n",
            " [2,4,6]\r\n",
            " nil\r\n"
        ],
        "correctAns": 3
    }
]